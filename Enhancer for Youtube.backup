{
  "version": "3.0.6",
  "settings": {
    "applyvideofilters": false,
    "backdropcolor": "#000000",
    "backdropopacity": 85,
    "blackbars": false,
    "blockautoplay": false,
    "blockhfrformats": false,
    "blockwebmformats": false,
    "boostvolume": false,
    "cinemamode": false,
    "cinemamodewideplayer": false,
    "controlbar": {
      "active": false,
      "autohide": false,
      "centered": true,
      "position": "fixed"
    },
    "controls": [],
    "controlsvisible": true,
    "controlspeed": false,
    "controlspeedmousebutton": false,
    "controlvolume": false,
    "controlvolumemousebutton": false,
    "convertshorts": false,
    "customcolors": {
      "--dimmer-text": "#cccccc",
      "--hover-background": "#232323",
      "--main-background": "#111111",
      "--main-color": "#00adee",
      "--main-text": "#eff0f1",
      "--second-background": "#181818",
      "--shadow": "#000000"
    },
    "customcss": "",
    "customscript": "var styleElement = document.createElement('style');\nlet buttonPosition;\nlet position;\nlet observer = null;\nlet isClicked = true;\nlet lastUrl = null;\nlet toggleButton = null;\nlet isSkippingEnabled = true;\nlet isRestartScheduled = false;\nlet hasNavigationButtonBeenFetched = false;\n\nfunction createScrollToTopButton() {\n    const existingButton = document.getElementById('scroll-to-top');\n    if (existingButton) {\n        existingButton.remove();\n    }\n    // Remove existing styles if present\n    const existingStyles = document.querySelector('style[data-scroll-top-styles]');\n    if (existingStyles) {\n        existingStyles.remove();\n    }\n    const scrollToTopBtn = document.createElement('button');\n    const svgElement = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n    const pathElement = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n    const divElement = document.createElement('div');\n    const scrollTopBtnStyles = document.createElement('style');\n\n    scrollToTopBtn.id = 'scroll-to-top';\n    scrollToTopBtn.classList.add('scroll-top-btn');\n    scrollToTopBtn.setAttribute('aria-label', 'Scroll to Top');\n\n    svgElement.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\n    svgElement.setAttribute('height', '24');\n    svgElement.setAttribute('viewBox', '0 0 24 24');\n    svgElement.setAttribute('width', '24');\n    svgElement.setAttribute('focusable', 'false');\n    svgElement.style.fill = 'red';\n    svgElement.style.display = 'flex';\n\n    pathElement.setAttribute(\n        'd',\n        'M19.884 10.114a1.25 1.25 0 01-1.768 1.768L13.25 7.016v12.982a1.25 1.25 0 11-2.5 0V7.016l-4.866 4.866a1.25 1.25 0 11-1.768-1.768L12 2.23l7.884 7.884Z'\n    );\n\n    var viewportWidth = window.innerWidth;\n    if (window.screen.width === 2560 && window.screen.height === 1440) {\n        buttonPosition = viewportWidth * 0.73;\n    } else {\n        buttonPosition = viewportWidth * 0.7;\n    }\n\n    svgElement.appendChild(pathElement);\n    divElement.classList.add('scroll-up-btn');\n    divElement.appendChild(svgElement);\n    scrollToTopBtn.appendChild(divElement);\n\n    scrollTopBtnStyles.setAttribute('data-scroll-top-styles', 'true');\n    scrollTopBtnStyles.textContent = `\n    .scroll-top-btn {\n      position: fixed;\n      opacity: 0;\n      bottom: 20px;\n      left: ${buttonPosition}px;\n      width: 55px;\n      height: 55px;\n      border: 1px solid red;\n      padding: 0;\n      border-radius: 50%;\n      background-color: var(--light-bt);\n      cursor: pointer;\n      transition: background-color 0.2s ease;\n    }\n    .scroll-top-btn:hover {\n      background-color: var(--light-bt-hover);\n    }\n    @media (prefers-color-scheme: dark) {\n      .scroll-top-btn {\n        background-color: var(--dark-bt);\n      }\n      .scroll-top-btn:hover {\n        background-color: var(--dark-bt-hover);\n      }\n    }\n    .scroll-up-btn {\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      height: 100%;\n      width: 100%;\n    }\n  `;\n    scrollToTopBtn.addEventListener('click', function () {\n        window.scrollTo({\n            top: 0,\n            behavior: 'smooth',\n        });\n    });\n    const scrollPosition = window.pageYOffset || document.documentElement.scrollTop;\n    if (scrollPosition > 1000 && checkIfWatchPage()) {\n        scrollToTopBtn.style.opacity = '1';\n    } else {\n        scrollToTopBtn.style.opacity = '0';\n    }\n    document.head.appendChild(styleElement);\n    document.head.appendChild(scrollTopBtnStyles);\n    document.body.appendChild(scrollToTopBtn);\n}\n// Function to update page elements under the video-player\nfunction updatePageElements() {\n    var primaryElement = document.querySelector('#primary');\n    var columnsElement = document.querySelector('#columns');\n    var viewportWidth = window.innerWidth;\n    if (columnsElement && primaryElement) {\n        var maxWidthValue;\n        if (window.screen.width === 2560 && window.screen.height === 1440) {\n            maxWidthValue = 2300;\n            if (window.pageYOffset >= 4200) {\n                position = viewportWidth * 0.75 + 20;\n            } else {\n                position = viewportWidth * 0.55 - 30;\n            }\n        } else if (window.screen.width === 1920 && window.screen.height === 1080) {\n            maxWidthValue = 1850;\n            position = viewportWidth * 0.45 - 10;\n        } else {\n            maxWidthValue = 1850;\n        }\n    }\n    var cssRules = `\n    :root {\n      --dark-fl: brightness(0.6) !important;\n      --dark-fl-hover: brightness(0.6) !important;\n      --light-fl: brightness(0.8) !important;\n      --light-fl-hover: brightness(0.6) !important;\n      --dark-bt: rgba(39, 39, 39);\n      --dark-bt-hover: rgba(82, 82, 82);\n      --light-bt: rgba(242, 242, 242);\n      --light-bt-hover: rgba(217,217,217);\n    } \n    #start.ytd-masthead {\n      height: 50px !important;\n      border-radius: 30px !important;\n      display: flex !important;\n      position: static !important;\n      margin: 0 10% !important;\n      border: 1px solid red !important;\n      backdrop-filter: var(--light-fl) !important;\n    }\n    .ytSearchboxComponentHost {\n      height: 53px !important;\n      margin: 0 12px 0 0 !important;\n    }\n    .ytSearchboxComponentInputBox {\n      margin-left: 0 !important;\n      margin-top: 0 !important;\n      border: 1px solid red !important;\n      box-shadow: none !important;\n      height: 50px !important;\n      background: transparent !important;\n      backdrop-filter: var(--light-fl) !important;\n      display: flex !important;\n      justify-content: space-around !important;\n    }\n    #center.ytd-masthead {\n      margin: auto !important;\n    }\n    #container.ytd-searchbox {\n      margin-left: 0 !important;\n      border: 1px solid red !important;\n      box-shadow: none !important;\n      background: transparent !important;\n      backdrop-filter: var(--light-fl) !important;\n      display: flex !important;\n      opacity: 0 !important;\n      justify-content: space-around !important;\n    }\n    #end.ytd-masthead {\n      height: 50px !important;\n      min-width: 10px !important;\n      border-radius: 30px !important;\n      position: relative !important;\n      margin: 0 10% !important;\n      border: 1px solid red !important;\n      backdrop-filter: var(--light-fl) !important;\n    } \n    #primary.ytd-watch-flexy { \n      max-width: ${maxWidthValue}px !important;\n      margin-left: 0px !important;\n      margin-top: 12px !important;\n    }\n    #columns.ytd-watch-flexy {\n     max-width: ${maxWidthValue}px !important;\n    }\n    ytd-watch-flexy[flexy] #secondary.ytd-watch-flexy {\n      min-width: 450px !important;\n      padding-right: 0px !important;\n    }\n    .ytSearchboxComponentSearchButton {\n      background: transparent !important;\n      border: 1px solid red !important;\n      backdrop-filter: var(--light-fl) !important;\n      height: 52px !important;\n    }\n    .yt-spec-button-shape-next--overlay.yt-spec-button-shape-next--text {\n      backdrop-filter: var(--light-fl) !important;\n      color: white !important;\n    }\n    #background.ytd-masthead {\n      position: fixed !important;\n      opacity: 0 !important;\n      visibility: visible !important;\n      --light-theme-text-color: invert !important;\n    }\n    #search-form.ytd-searchbox {\n      height: 50px !important;\n    }\n    ytd-searchbox.ytd-masthead {\n      margin: 0 !important;\n      padding: 0 10px !important;\n    }\n    #sections.ytd-guide-renderer {\n      position: relative !important;\n    }\n    #sections.ytd-guide-renderer>*.ytd-guide-renderer:first-child {\n      padding: 0px !important;\n    }\n    #voice-search-button.ytd-masthead {\n      margin-left: 0 !important;\n      //border: 1px solid red !important;\n      background: transparent !important;\n      backdrop-filter: var(--light-fl) !important;\n    }\n    #chips-wrapper.ytd-feed-filter-chip-bar-renderer {\n      display: none !important;\n    }\n    .yt-spec-touch-feedback-shape__fill {\n      background-color: black !important;\n    }\n    .yt-spec-icon-shape {\n      color: #c00 !important;\n    }\n    ytd-feed-filter-chip-bar-renderer {\n      height: 0 !important;\n    }\n    body.efyt-mini-player.efyt-mini-player-top-right #movie_player:not(.ytp-fullscreen) {\n      height: 315px !important;\n      border-radius: 14px !important;\n      width: 560px !important;\n      top: 55px !important;\n      left: ${position}px !important;\n      z-index: 1000 !important;\n    }\n    body._top-right #efyt-close-mini-player {\n      top: 60px !important;\n      left: ${position}px !important;\n      width: 3% !important;\n      height: 3% !important;\n    }  \n    #frosted-glass.with-chipbar.ytd-app {\n     display: none;\n    }\n    .yt-spec-touch-feedback-shape {\n    border: 1px solid red;\n    }\n    @media (prefers-color-scheme: dark) {\n      #start.ytd-masthead {\n        backdrop-filter: var(--dark-fl) !important;}\n        #start.ytd-masthead:hover {\n        backdrop-filter: var(--dark-fl-hover) !important;}\n      .ytSearchboxComponentInputBox {\n        backdrop-filter: var(--dark-fl) !important;}\n        .ytSearchboxComponentInputBox:hover {\n        backdrop-filter: var(--dark-fl-hover) !important;}\n      #container.ytd-searchbox {\n        backdrop-filter: var(--dark-fl) !important;}\n        #container.ytd-searchbox:hover {\n        backdrop-filter: var(--dark-fl-hover) !important;}\n      #end.ytd-masthead {\n        backdrop-filter: var(--dark-fl) !important;}\n        #end.ytd-masthead:hover {\n        backdrop-filter: var(--dark-fl-hover) !important;}\n      .ytSearchboxComponentSearchButton {\n        backdrop-filter: var(--dark-fl) !important;}\n        .ytSearchboxComponentSearchButton:hover {\n        backdrop-filter: var(--dark-fl-hover) !important;}\n      .yt-spec-button-shape-next--overlay.yt-spec-button-shape-next--text {\n        backdrop-filter: var(--dark-fl) !important;}\n        .yt-spec-button-shape-next--overlay.yt-spec-button-shape-next--text:hover {\n        backdrop-filter: var(--dark-fl-hover) !important;}\n      #voice-search-button.ytd-masthead {\n        backdrop-filter: var(--dark-fl) !important;}\n        #voice-search-button.ytd-masthead:hover {\n        backdrop-filter: var(--dark-fl-hover) !important;}\n    }\n  `;\n    styleElement.textContent = cssRules;\n}\n// Dynamically move elements of the top bar when the page is resized or scrolled\nfunction adjustTopBarElements() {\n    const masthead = document.querySelector('#masthead-container.ytd-app');\n    const center = document.querySelector('#center.ytd-masthead');\n    const container = document.querySelector('#container.ytd-masthead');\n    if (masthead && center && container) {\n        const windowWidth = window.innerWidth;\n        var scrollY = window.scrollY;\n        var mastheadWidth;\n        if (scrollY != 0) {\n            container.style.opacity = `0.8`;\n        } else if (scrollY === 0) {\n            container.style.opacity = `1`;\n        }\n        if (windowWidth <= 658) {\n            mastheadWidth = 0;\n        } else if (windowWidth >= 1750) {\n            mastheadWidth = 100;\n        } else {\n            mastheadWidth = ((windowWidth - 658) / (1750 - 658)) * 100;\n        }\n        //masthead.style.width = `${mastheadWidth}%`;\n        let centerFlexBasis = 0;\n        if (windowWidth <= 658) {\n            centerFlexBasis = 200;\n        } else if (windowWidth >= 1750) {\n            centerFlexBasis = 550;\n        } else {\n            centerFlexBasis =\n                200 + ((windowWidth - 658) / (1750 - 658)) * (550 - 200);\n        }\n        center.style.flex = `0 0 ${centerFlexBasis}px`;\n    }\n}\n// Function to wait for a DOM element to be available\nfunction waitForDOMElement(selector, callback, options = {}) {\n    const { interval = 100, timeout = 10000 } = options;\n    if (checkIfShortsPage()) {\n        const startTime = Date.now();\n        const checkElement = () => {\n            const element = document.querySelector(selector);\n            if (element) {\n                callback(element);\n            } else if (Date.now() - startTime < timeout) {\n                setTimeout(checkElement, interval);\n            }\n        };\n        checkElement();\n    } else {\n        return;\n    }\n}\n// Function to restart the observer\nfunction restartObserver() {\n    if (isRestartScheduled) {\n        return;\n    }\n    isRestartScheduled = true;\n    setTimeout(() => {\n        isRestartScheduled = false;\n        SkippingShorts();\n    }, 1000);\n}\n// Function to handle skipping shorts\nfunction SkippingShorts() {\n    if (checkIfShortsPage()) {\n        isClicked = false;\n        if (!hasNavigationButtonBeenFetched) {\n            waitForDOMElement(\n                '#navigation-button-down > ytd-button-renderer > yt-button-shape > button',\n                button => {\n                    navigationButtonDown = button;\n                    hasNavigationButtonBeenFetched = true;\n\n                    navigationButtonDown.addEventListener(\n                        'click',\n                        function observerReinitHandler(e) {\n                            if (!e.isTrusted) return;\n                            navigationButtonDown.removeEventListener(\n                                'click',\n                                observerReinitHandler\n                            );\n                            if (observer) {\n                                observer.disconnect();\n                            }\n                            restartObserver();\n                        }\n                    );\n                },\n                {\n                    interval: 100,\n                    timeout: 10000,\n                } // Pass options as an object\n            );\n        }\n        waitForDOMElement(\n            '#scrubber > desktop-shorts-player-controls > div > yt-progress-bar > div',\n            progressBarElement => {\n                if (observer) {\n                    observer.disconnect();\n                }\n                let maxWidth = 0;\n\n                observer = new MutationObserver(mutations => {\n                    mutations.forEach(mutation => {\n                        if (\n                            mutation.attributeName === 'aria-valuetext' &&\n                            isSkippingEnabled\n                        ) {\n                            let ariaValueText =\n                                progressBarElement.getAttribute('aria-valuetext');\n                            let widthNumber = parseFloat(ariaValueText.replace('%',``));\n                            if (widthNumber >= maxWidth) {\n                                maxWidth = widthNumber;\n                            } else if (maxWidth >= 95 && widthNumber < maxWidth - 10 && !isClicked) {\n                                dispatchSpacebarEvent();\n                                navigationButtonDown.click();\n                                isClicked = true;\n                                observer.disconnect();\n                                restartObserver();\n                                maxWidth = 0;\n                            }\n                        }\n                    });\n                });\n                observer.observe(progressBarElement, {\n                    attributes: true,\n                    attributeFilter: ['aria-valuetext'],\n                });\n            },\n            100,\n            10000\n        );\n    }\n}\n// Toggle Button for the YT Shorts Page\nfunction addToggleButton() {\n    if (checkIfShortsPage()) {\n        const windowHeight = window.innerHeight;\n        var buttonPosition;\n        if (windowHeight <= 575) {\n            buttonPosition = 123;\n        } else if (windowHeight >= 900) {\n            buttonPosition = 310;\n        } else {\n            buttonPosition = 123 + ((windowHeight - 575) / (900 - 575)) * (310 - 1123);\n        }\n        let toggleButton = document.getElementById('shorts-skip-toggle');\n        if (!toggleButton) {\n            // Create styles only once\n            const toggleStyles = document.createElement('style');\n            toggleStyles.id = 'toggleStyles';\n            toggleStyles.textContent = `\n            .skip-toggle-btn {\n                pointer-events: all;\n                width: 100%;\n                height: 100%;\n                margin: none;\n                border-radius: 50%;\n                background-color: var(--light-bt);\n                cursor: pointer;\n                transition: background-color 0.2s ease;\n                z-index: 1000;\n                opacity: 1;\n                border: 1px solid red;\n                justify-content: center;\n                align-items: center;\n            }\n            .skip-toggle-btn:hover {\n                background-color: var(--light-bt-hover);\n            }\n            @media (prefers-color-scheme: dark) {\n                .skip-toggle-btn {\n                background-color: var(--dark-bt);\n                }\n                .skip-toggle-btn:hover {\n                background-color: var(--dark-bt-hover);\n                }\n            }\n            .toggle-icon {\n                display: flex;\n                justify-content: center;\n                align-items: center;\n                height: 100%;\n                width: 100%;\n                color: #c02;\n                font-size: 13px;\n                font-family: 'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande',\n                'Lucida Sans Unicode', Geneva, Verdana, serif;\n                font-weight: 600;\n                }\n            `;\n            document.head.appendChild(toggleStyles);\n            // Create the container div\n            const autoskipContainer = document.createElement('div');\n            autoskipContainer.className = 'navigation-button style-scope ytd-shorts';\n            autoskipContainer.id = 'shorts autoskip';\n            autoskipContainer.style.width = '58px';\n            autoskipContainer.style.height = '58px';\n\n            // Create the button\n            const toggleButton = document.createElement('button');\n            toggleButton.id = 'shorts-skip-toggle';\n            toggleButton.className = 'skip-toggle-btn';\n            toggleButton.title = 'Toggle Video Skipping (ON = Skip, OFF = No Skip)';\n\n            const icon = document.createElement('span');\n            icon.className = 'toggle-icon';\n            icon.textContent = 'SKIP';\n            toggleButton.appendChild(icon);\n\n            // Append button to container\n            autoskipContainer.appendChild(toggleButton);\n\n            waitForDOMElement(\n                '.navigation-container.style-scope.ytd-shorts',\n                (navigationContainer) => {\n                    waitForDOMElement(\n                        '#navigation-button-up',\n                        (navigationButtonUp) => {\n                            navigationContainer.insertBefore(autoskipContainer, navigationButtonUp);\n                        },\n                        { interval: 100, timeout: 10000 }\n                    );\n                },\n                { interval: 100, timeout: 10000 }\n            );\n\n            toggleButton.addEventListener('click', () => {\n                isSkippingEnabled = !isSkippingEnabled;\n                icon.textContent = isSkippingEnabled ? 'SKIP' : 'NO SKIP';\n\n                if (isSkippingEnabled) {\n                    const progressBarElement = document.querySelector(\n                        '#scrubber > desktop-shorts-player-controls > div > yt-progress-bar > div'\n                    );\n                    if (progressBarElement) {\n                        observer.observe(progressBarElement, {\n                            attributes: true,\n                            attributeFilter: ['aria-valuetext'],\n                        });\n                    }\n                } else if (!isSkippingEnabled && observer) {\n                    observer.disconnect();\n                }\n            });\n        }\n    }\n}\n\n// Small Helper Functions\nfunction checkIfWatchPage() {\n    return window.location.href.includes('youtube.com/watch');\n}\nfunction checkIfShortsPage() {\n    return window.location.href.includes('youtube.com/shorts');\n}\nfunction dispatchSpacebarEvent() {\n    const spacebarEvent = new KeyboardEvent('keydown', {\n        key: ' ',\n        code: 'Space',\n        keyCode: 32,\n        bubbles: true,\n        cancelable: true,\n    });\n    document.dispatchEvent(spacebarEvent);\n}\n// Function to remove the toggle button from YT Shorts Page\nfunction removeToggleButton() {\n    const toggleButton = document.getElementById('shorts-skip-toggle');\n    if (toggleButton && toggleButton.parentNode) {\n        toggleButton.dispatchEvent(new Event('remove'));\n        toggleButton.parentNode.removeChild(toggleButton);\n    }\n    const toggleStyles = document.getElementById('toggleStyles');\n    if (toggleStyles && toggleStyles.parentNode) {\n        toggleStyles.parentNode.removeChild(toggleStyles);\n    }\n}\n// Function to check for URL changes when the page is not a Shorts page and remove the toggle button\nfunction checkUrlChange() {\n    const currentUrl = window.location.href;\n    if (currentUrl !== lastUrl) {\n        lastUrl = currentUrl;\n        if (!currentUrl.includes('youtube.com/shorts')) {\n            removeToggleButton();\n            if (observer) {\n                observer.disconnect();\n            }\n        } else {\n            console.log('The Shorts Script is working');\n            SkippingShorts();\n            addToggleButton();\n        }\n    }\n    setTimeout(checkUrlChange, 500);\n}\n\n// Event Listeners with Debouncing\nlet lastWheelEvent = 0;\nlet lastKeyEvent = 0;\nconst debounceDelay = 1000;\n\ndocument.addEventListener('wheel', function (event) {\n    const now = Date.now();\n    if (event.deltaY < 0 || event.deltaY > 0) {\n        lastWheelEvent = now;\n        if (observer) {\n            observer.disconnect();\n        }\n        restartObserver();\n    }\n});\n\ndocument.addEventListener('keydown', function (event) {\n    const now = Date.now();\n    if (event.keyCode === 38 || event.keyCode === 40) {\n        lastKeyEvent = now;\n        if (observer) {\n            observer.disconnect();\n        }\n        restartObserver();\n    }\n});\n\n//Event Listeners\nwindow.addEventListener('load', updatePageElements);\nwindow.addEventListener('load', adjustTopBarElements);\nwindow.addEventListener('popstate', createScrollToTopButton);\nwindow.addEventListener('popstate', addToggleButton);\nwindow.addEventListener('resize', adjustTopBarElements);\nwindow.addEventListener('resize', updatePageElements);\nwindow.addEventListener('resize', createScrollToTopButton);\nwindow.addEventListener('resize', addToggleButton);\nwindow.addEventListener('scroll', updatePageElements);\nwindow.addEventListener('scroll', createScrollToTopButton);\nwindow.addEventListener('scroll', adjustTopBarElements);\nwindow.addEventListener('DOMContentLoaded', checkUrlChange);\n\n// Initial function calls\nupdatePageElements();\nadjustTopBarElements();\ncheckUrlChange();\ncreateScrollToTopButton();",
    "customtheme": false,
    "darktheme": false,
    "date": 1648332255121,
    "defaultvolume": false,
    "disableautoplay": false,
    "executescript": true,
    "expanddescription": true,
    "filter": "none",
    "hidecardsendscreens": true,
    "hidechat": false,
    "hidecomments": false,
    "hiderelated": false,
    "hideshorts": false,
    "ignoreplaylists": true,
    "ignorepopupplayer": true,
    "localecode": "en_US",
    "localedir": "ltr",
    "miniplayer": true,
    "miniplayerposition": "top-right",
    "miniplayersize": "560x315",
    "newestcomments": false,
    "overridespeeds": false,
    "pauseforegroundtab": false,
    "pausevideos": true,
    "popuplayersize": "747x420",
    "previousversion": "3.0.5",
    "qualityembeds": "hd720",
    "qualityembedsfullscreen": "hd1080",
    "qualityplaylists": "hd720",
    "qualityplaylistsfullscreen": "hd1440",
    "qualityvideos": "hd1080",
    "qualityvideosfullscreen": "hd1440",
    "reload": false,
    "reversemousewheeldirection": false,
    "selectquality": true,
    "selectqualityfullscreenoff": true,
    "selectqualityfullscreenon": true,
    "speed": 1,
    "speedvariation": 0.1,
    "stopvideos": false,
    "theatermode": false,
    "theme": "default-dark",
    "themevariant": "dark-red.css",
    "update": 1740129345957,
    "vendorthemevariant": "youtube-deep-dark.css",
    "videofilters": {
      "blur": 0,
      "brightness": 100,
      "contrast": 100,
      "grayscale": 0,
      "inversion": 0,
      "rotation": 0,
      "saturation": 100,
      "sepia": 0
    },
    "volume": 100,
    "volumemultiplier": 2,
    "volumevariation": 5,
    "whatsnew": false,
    "wideplayer": true,
    "wideplayerviewport": false
  }
}
