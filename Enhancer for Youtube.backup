{
  "version": "3.0.6",
  "settings": {
    "applyvideofilters": false,
    "backdropcolor": "#000000",
    "backdropopacity": 85,
    "blackbars": false,
    "blockautoplay": false,
    "blockhfrformats": false,
    "blockwebmformats": false,
    "boostvolume": false,
    "cinemamode": false,
    "cinemamodewideplayer": false,
    "controlbar": {
      "active": false,
      "autohide": false,
      "centered": true,
      "position": "fixed"
    },
    "controls": [],
    "controlsvisible": true,
    "controlspeed": false,
    "controlspeedmousebutton": false,
    "controlvolume": false,
    "controlvolumemousebutton": false,
    "convertshorts": false,
    "customcolors": {
      "--dimmer-text": "#cccccc",
      "--hover-background": "#232323",
      "--main-background": "#111111",
      "--main-color": "#00adee",
      "--main-text": "#eff0f1",
      "--second-background": "#181818",
      "--shadow": "#000000"
    },
    "customcss": "",
    "customscript": "// Variable Declarations\nvar styleElement = document.createElement('style');\nlet buttonPosition;\nlet position;\nvar viewportWidth = window.innerWidth;\nlet observer = null;\nlet isClicked = true;\nlet isSkippingEnabled = true; // Toggle state\nlet isRestartScheduled = false;\nconst scrollToTopBtn = document.createElement('button');\nconst svgElement = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\nconst pathElement = document.createElementNS('http://www.w3.org/2000/svg', 'path');\nconst divElement = document.createElement('div');\nconst scrollTopBtnStyles = document.createElement('style');\n\n// Conditional Logic for Button Position\nif (window.screen.width === 2560 && window.screen.height === 1440) {\n  buttonPosition = viewportWidth * 0.73;\n} else {\n  buttonPosition = viewportWidth * 0.7 - 30;\n}\n\n// DOM Manipulations\nscrollToTopBtn.id = 'scroll-to-top';\nscrollToTopBtn.classList.add('scroll-top-btn');\nscrollToTopBtn.setAttribute('aria-label', 'Scroll to Top');\n\nsvgElement.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\nsvgElement.setAttribute('height', '24');\nsvgElement.setAttribute('viewBox', '0 0 24 24');\nsvgElement.setAttribute('width', '24');\nsvgElement.setAttribute('focusable', 'false');\nsvgElement.style.fill = 'red';\nsvgElement.style.display = 'flex';\n\npathElement.setAttribute('d', 'M19.884 10.114a1.25 1.25 0 01-1.768 1.768L13.25 7.016v12.982a1.25 1.25 0 11-2.5 0V7.016l-4.866 4.866a1.25 1.25 0 11-1.768-1.768L12 2.23l7.884 7.884Z');\n\nsvgElement.appendChild(pathElement);\n\ndivElement.classList.add('scroll-up-btn');\ndivElement.appendChild(svgElement);\n\nscrollToTopBtn.appendChild(divElement);\n\nscrollTopBtnStyles.textContent = `\n  :root {\n    --dark-bg: rgba(100,100,100, 0.5); /* 50% dark circle for light theme */\n    --dark-bg-hover: rgba(150, 150, 150, 0.5); /* 80% dark circle for light theme hover */\n    --light-bg: rgba(200, 200, 200, 0.5); /* 50% light circle for dark theme */\n    --light-bg-hover: rgba(150, 150, 150, 0.5); /* 80% light circle for dark theme hover */\n  }\n\n  /* Light theme */\n  .scroll-top-btn {\n    position: fixed;\n    opacity: 0;\n    bottom: 20px;\n    left: ${buttonPosition}px;\n    width: 55px;\n    height: 55px;\n    border: 1px solid red;\n    padding: 0;\n    border-radius: 50%;\n    background-color: var(--light-bg);\n    cursor: pointer;\n    transition: background-color 0.2s ease;\n  }\n  .scroll-top-btn:hover {\n    background-color: var(--light-bg-hover);\n  }\n  /* Dark theme */\n  @media (prefers-color-scheme: dark) {\n    .scroll-top-btn {\n      background-color: var(--dark-bg);\n    }\n    .scroll-top-btn:hover {\n      background-color: var(--dark-bg-hover);\n    }\n  }\n  .scroll-up-btn {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100%;\n    width: 100%;\n  }\n`;\n\ndocument.head.appendChild(styleElement);\ndocument.head.appendChild(scrollTopBtnStyles);\ndocument.body.appendChild(scrollToTopBtn);\n\n// Large Functions\nfunction updatePlayerPosition() {\n  var primaryElement = document.querySelector('#primary');\n  var columnsElement = document.querySelector('#columns');\n  var viewportWidth = window.innerWidth;\n\n  if (columnsElement && primaryElement) {\n    var maxWidthValue;\n    if (window.screen.width === 2560 && window.screen.height === 1440) {\n      maxWidthValue = 2300;\n      if (window.pageYOffset >= 4200) {\n        position = viewportWidth * 0.75 + 20;\n      } else {\n        position = viewportWidth * 0.55 - 30;\n      }\n    } else if (window.screen.width === 1920 && window.screen.height === 1080) {\n      maxWidthValue = 1850;\n      position = viewportWidth * 0.45 - 30;\n    } else {\n      maxWidthValue = 1850;\n    }\n    primaryElement.style.maxWidth = '1650px';\n    primaryElement.style.marginTop = '12px';\n    primaryElement.style.marginLeft = '0px';\n    columnsElement.style.maxWidth = maxWidthValue + 'px';\n  }\n\n  var cssRules = `\n    #start.ytd-masthead {\n      height: 50px !important;\n      border-radius: 30px !important;\n      display: flex !important;\n      position: static !important;\n      margin: 0 10% !important;\n      border: 1px solid red !important;\n      backdrop-filter: brightness(0.6) !important;\n    }\n\n    .ytSearchboxComponentHost {\n      height: 53px !important;\n      margin: 0 12px 0 0 !important;\n    }\n\n    .ytSearchboxComponentInputBox {\n      margin-left: 0 !important;\n      margin-top: 0 !important;\n      border: 1px solid red !important;\n      box-shadow: none !important;\n      height: 50px !important;\n      background: transparent !important;\n      backdrop-filter: brightness(0.6) !important;\n      display: flex !important;\n      justify-content: space-around !important;\n    }\n\n    #center.ytd-masthead {\n      margin: auto !important;\n    }\n\n    #container.ytd-searchbox {\n      margin-left: 0 !important;\n      border: 1px solid red !important;\n      box-shadow: none !important;\n      background: transparent !important;\n      backdrop-filter: brightness(0.6) !important;\n      display: flex !important;\n      justify-content: space-around !important;\n    }\n\n    #end.ytd-masthead {\n      height: 50px !important;\n      min-width: 10px !important;\n      border-radius: 30px !important;\n      position: relative !important;\n      margin: 0 10% !important;\n      border: 1px solid red !important;\n      backdrop-filter: brightness(0.6) !important;\n    }\n\n    ytd-watch-flexy[flexy] #secondary.ytd-watch-flexy {\n      min-width: 450px !important;\n      padding-right: 0px !important;\n    }\n\n    .ytSearchboxComponentSearchButton {\n      background: transparent !important;\n      border: 1px solid red !important;\n      backdrop-filter: brightness(0.6) !important;\n      height: 52px !important;\n    }\n\n    .yt-spec-button-shape-next--overlay.yt-spec-button-shape-next--text {\n      backdrop-filter: brightness(0.6) !important;\n      color: white !important;\n    }\n\n    #background.ytd-masthead {\n      position: fixed !important;\n      opacity: 0 !important;\n      visibility: visible !important;\n      --light-theme-text-color: invert !important;\n    }\n\n    #search-form.ytd-searchbox {\n      height: 50px !important;\n    }\n\n    ytd-searchbox.ytd-masthead {\n      margin: 0 !important;\n      padding: 0 10px !important;\n    }\n\n    #sections.ytd-guide-renderer {\n      position: relative !important;\n    }\n\n    #sections.ytd-guide-renderer>*.ytd-guide-renderer:first-child {\n      padding: 0px !important;\n    }\n\n    #voice-search-button.ytd-masthead {\n      margin-left: 0 !important;\n      border: 1px solid red !important;\n      background: transparent !important;\n      backdrop-filter: brightness(0.6) !important;\n    }\n\n    #chips-wrapper.ytd-feed-filter-chip-bar-renderer {\n      display: none !important;\n    }\n\n    .yt-spec-touch-feedback-shape__fill {\n      background-color: black !important;\n    }\n\n    .yt-spec-icon-shape {\n      color: #c00 !important;\n    }\n\n    ytd-feed-filter-chip-bar-renderer {\n      height: 0 !important;\n    }\n\n    body.efyt-mini-player.efyt-mini-player-top-right #movie_player:not(.ytp-fullscreen) {\n      height: 315px !important;\n      border-radius: 14px !important;\n      width: 560px !important;\n      top: 55px !important;\n      left: ${position}px !important;\n      z-index: 100 !important;\n    }\n\n    body._top-right #efyt-close-mini-player {\n      top: 60px !important;\n      left: ${position}px !important;\n      width: 3% !important;\n      height: 3% !important;\n    }\n  `;\n  styleElement.textContent = cssRules;\n}\n\nfunction adjustDynamicStyles() {\n  const masthead = document.querySelector('#masthead-container.ytd-app');\n  const center = document.querySelector('#center.ytd-masthead');\n\n  if (masthead && center) {\n    const windowWidth = window.innerWidth;\n    let mastheadWidth = 0;\n    if (windowWidth <= 658) {\n      mastheadWidth = 0;\n    } else if (windowWidth >= 1750) {\n      mastheadWidth = 100;\n    } else {\n      mastheadWidth = ((windowWidth - 658) / (1750 - 658)) * 100;\n    }\n    masthead.style.width = `${mastheadWidth}%`;\n\n    let centerFlexBasis = 0;\n    if (windowWidth <= 658) {\n      centerFlexBasis = 200;\n    } else if (windowWidth >= 1750) {\n      centerFlexBasis = 550;\n    } else {\n      centerFlexBasis = 200 + ((windowWidth - 658) / (1750 - 658)) * (550 - 200);\n    }\n    center.style.flex = `0 0 ${centerFlexBasis}px`;\n  }\n}\n\nfunction waitForDOMElement(selector, callback, interval = 100, timeout = 10000) {\n  if (checkIfShortsPage()) {\n    const startTime = Date.now();\n    const checkElement = () => {\n      const element = document.querySelector(selector);\n      if (element) {\n        callback(element);\n      } else if (Date.now() - startTime < timeout) {\n        setTimeout(checkElement, interval);\n      }\n    };\n    checkElement();\n  }\n}\n\nfunction setupObserverForShort() {\n  if (checkIfShortsPage()) {\n    isClicked = false;\n    waitForDOMElement(\n      '#scrubber > desktop-shorts-player-controls > div > yt-progress-bar > div',\n      progressBarElement => {\n        waitForDOMElement(\n          '#navigation-button-down > ytd-button-renderer > yt-button-shape > button',\n          navigationButtonDown => {\n            if (observer) {\n              observer.disconnect();\n            }\n            let maxWidth = 0;\n\n            observer = new MutationObserver(mutations => {\n              mutations.forEach(mutation => {\n                if (mutation.attributeName === 'aria-valuetext' && isSkippingEnabled) {\n                  let ariaValueText = progressBarElement.getAttribute('aria-valuetext');\n                  let widthNumber = parseFloat(ariaValueText.replace('%', ''));\n                  if (widthNumber >= maxWidth) {\n                    maxWidth = widthNumber;\n                  } else if (maxWidth >= 97 && widthNumber < maxWidth - 10 && !isClicked) {\n                    navigationButtonDown.click();\n                    isClicked = true;\n                    observer.disconnect();\n                    if (!isRestartScheduled) {\n                      isRestartScheduled = true;\n                      setTimeout(() => {\n                        isRestartScheduled = false;\n                        setupObserverForShort();\n                      }, 1000);\n                    }\n                    maxWidth = 0;\n                  }\n                }\n              });\n            });\n\n            observer.observe(progressBarElement, {\n              attributes: true,\n              attributeFilter: ['aria-valuetext'],\n            });\n\n            navigationButtonDown.addEventListener(\n              'click',\n              function observerReinitHandler() {\n                navigationButtonDown.removeEventListener('click', observerReinitHandler);\n                isClicked = true;\n              }\n            );\n          },\n          100,\n          10000\n        );\n      },\n      100,\n      10000\n    );\n  }\n}\n\nfunction addToggleButton() {\n  if (!checkIfShortsPage()) return;\n\n  const toggleStyles = document.createElement('style');\n  toggleStyles.textContent = `\n    :root {\n      --dark-bg: rgba(100,100,100, 0.5);\n      --dark-bg-hover: rgba(150, 150, 150, 0.5);\n      --light-bg: rgba(200, 200, 200, 0.5);\n      --light-bg-hover: rgba(150, 150, 150, 0.5);\n    }\n\n    .skip-toggle-btn {\n      position: fixed;\n      top: 380px;\n      right: 25px;\n      width: 55px;\n      height: 55px;\n      padding: 0;\n      border: 1px solid red;\n      border-radius: 50%;\n      background-color: var(--light-bg);\n      cursor: pointer;\n      transition: background-color 0.2s ease;\n      z-index: 1000;\n      opacity: 1;\n    }\n    .skip-toggle-btn:hover {\n      background-color: var(--light-bg-hover);\n    }\n    @media (prefers-color-scheme: dark) {\n      .skip-toggle-btn {\n        background-color: var(--dark-bg);\n      }\n      .skip-toggle-btn:hover {\n        background-color: var(--dark-bg-hover);\n      }\n    }\n    .toggle-icon {\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      height: 100%;\n      width: 100%;\n      font-size: 20px;\n      color: #c00;\n    }\n  `;\n  document.head.appendChild(toggleStyles);\n\n  const toggleButton = document.createElement('button');\n  toggleButton.id = 'shorts-skip-toggle';\n  toggleButton.className = 'skip-toggle-btn';\n  toggleButton.title = 'Toggle Video Skipping (ON = Skip, OFF = No Skip)';\n\n  const icon = document.createElement('span');\n  icon.className = 'toggle-icon';\n  icon.textContent = 'ON';\n  toggleButton.appendChild(icon);\n\n  document.body.appendChild(toggleButton);\n\n  toggleButton.addEventListener('click', () => {\n    isSkippingEnabled = !isSkippingEnabled;\n    icon.textContent = isSkippingEnabled ? 'ON' : 'OFF';\n\n    if (isSkippingEnabled) {\n      const progressBarElement = document.querySelector(\n        '#scrubber > desktop-shorts-player-controls > div > yt-progress-bar > div'\n      );\n      const navigationButtonDown = document.querySelector(\n        '#navigation-button-down > ytd-button-renderer > yt-button-shape > button'\n      );\n\n      if (progressBarElement && navigationButtonDown && observer) {\n        observer.observe(progressBarElement, {\n          attributes: true,\n          attributeFilter: ['aria-valuetext'],\n        });\n      } else if (!isClicked) {\n        setupObserverForShort();\n      }\n    } else if (!isSkippingEnabled && observer) {\n      observer.disconnect();\n    }\n  });\n  return toggleButton;\n}\n\n// Small Helper Functions\nfunction checkIfWatchPage() {\n  return window.location.href.includes('youtube.com/watch');\n}\n\nfunction checkIfShortsPage() {\n  return window.location.href.includes('youtube.com/shorts');\n}\n\nfunction dispatchSpacebarEvent() {\n  const spacebarEvent = new KeyboardEvent('keydown', {\n    key: ' ',\n    code: 'Space',\n    keyCode: 32,\n    bubbles: true,\n    cancelable: true,\n  });\n  document.dispatchEvent(spacebarEvent);\n}\n\nfunction updateScrollToTopButtonVisibility() {\n  const scrollPosition = window.pageYOffset || document.documentElement.scrollTop;\n  const scrollToTopBtn = document.getElementById('scroll-to-top');\n  if (scrollPosition > 1000 && checkIfWatchPage()) {\n    scrollToTopBtn.style.opacity = '1';\n  } else {\n    scrollToTopBtn.style.opacity = '0';\n  }\n}\n\n// Event Listeners\ndocument.addEventListener('wheel', function(event) {\n  if (event.deltaY < 0 || event.deltaY > 0) {\n    isClicked = true;\n    observer.disconnect();\n    setTimeout(setupObserverForShort, 1000);\n  }\n});\ndocument.addEventListener('keydown', function(event) {\n  if (event.keyCode === 38 || event.keyCode === 40) {\n    isClicked = true;\n    observer.disconnect();\n    setTimeout(setupObserverForShort, 1000);\n  }\n});\n\nwindow.addEventListener('popstate', updateScrollToTopButtonVisibility);\nwindow.addEventListener('resize', adjustDynamicStyles);\nwindow.addEventListener('resize', updatePlayerPosition);\nwindow.addEventListener('scroll', updatePlayerPosition);\nwindow.addEventListener('scroll', updateScrollToTopButtonVisibility);\ndocument.getElementById('scroll-to-top').addEventListener('click', function() {\n  window.scrollTo({\n    top: 0,\n    behavior: 'smooth',\n  });\n});\n\n// Function Calls\nsetupObserverForShort();\nupdatePlayerPosition();\nadjustDynamicStyles();\nupdateScrollToTopButtonVisibility();\naddToggleButton();",
    "customtheme": false,
    "darktheme": false,
    "date": 1648332255121,
    "defaultvolume": false,
    "disableautoplay": false,
    "executescript": true,
    "expanddescription": true,
    "filter": "none",
    "hidecardsendscreens": true,
    "hidechat": false,
    "hidecomments": false,
    "hiderelated": false,
    "hideshorts": false,
    "ignoreplaylists": true,
    "ignorepopupplayer": true,
    "localecode": "en_US",
    "localedir": "ltr",
    "miniplayer": true,
    "miniplayerposition": "top-right",
    "miniplayersize": "560x315",
    "newestcomments": false,
    "overridespeeds": false,
    "pauseforegroundtab": false,
    "pausevideos": true,
    "popuplayersize": "747x420",
    "previousversion": "3.0.5",
    "qualityembeds": "hd720",
    "qualityembedsfullscreen": "hd1080",
    "qualityplaylists": "hd720",
    "qualityplaylistsfullscreen": "hd1440",
    "qualityvideos": "hd1080",
    "qualityvideosfullscreen": "hd1440",
    "reload": false,
    "reversemousewheeldirection": false,
    "selectquality": true,
    "selectqualityfullscreenoff": true,
    "selectqualityfullscreenon": true,
    "speed": 1,
    "speedvariation": 0.1,
    "stopvideos": false,
    "theatermode": false,
    "theme": "default-dark",
    "themevariant": "dark-red.css",
    "update": 1740129345957,
    "vendorthemevariant": "youtube-deep-dark.css",
    "videofilters": {
      "blur": 0,
      "brightness": 100,
      "contrast": 100,
      "grayscale": 0,
      "inversion": 0,
      "rotation": 0,
      "saturation": 100,
      "sepia": 0
    },
    "volume": 100,
    "volumemultiplier": 2,
    "volumevariation": 5,
    "whatsnew": false,
    "wideplayer": true,
    "wideplayerviewport": false
  }
}
