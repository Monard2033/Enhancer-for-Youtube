{
  "version": "3.0.6",
  "settings": {
    "applyvideofilters": false,
    "backdropcolor": "#000000",
    "backdropopacity": 85,
    "blackbars": false,
    "blockautoplay": false,
    "blockhfrformats": false,
    "blockwebmformats": false,
    "boostvolume": false,
    "cinemamode": false,
    "cinemamodewideplayer": false,
    "controlbar": {
      "active": false,
      "autohide": false,
      "centered": true,
      "position": "fixed"
    },
    "controls": [
      "reverse-playlist"
    ],
    "controlsvisible": true,
    "controlspeed": false,
    "controlspeedmousebutton": false,
    "controlvolume": false,
    "controlvolumemousebutton": false,
    "convertshorts": false,
    "customcolors": {
      "--dimmer-text": "#cccccc",
      "--hover-background": "#232323",
      "--main-background": "#111111",
      "--main-color": "#00adee",
      "--main-text": "#eff0f1",
      "--second-background": "#181818",
      "--shadow": "#000000"
    },
    "customcss": "",
    "customscript": "(function () {\n    // Global variables for state tracking\n    let isClicked = true;\n    let isSkippingEnabled = true;\n    let hasNavigationButtonBeenFetched = false;\n    let navigationButtonDown = null;\n\n    // Throttle utility\n    function throttle(fn, delay) {\n        let lastCall = 0;\n        return (...args) => {\n            const now = Date.now();\n            if (now - lastCall >= delay) {\n                lastCall = now;\n                fn(...args);\n            }\n        };\n    }\n\n    // Debounce utility\n    function debounce(fn, delay) {\n        let timeoutId;\n        return (...args) => {\n            clearTimeout(timeoutId);\n            timeoutId = setTimeout(() => fn(...args), delay);\n        };\n    }\n\n    // Inject global styles once\n    const styleElement = document.createElement('style');\n    document.head.appendChild(styleElement);\n    styleElement.textContent = `\n        :root {\n            --dark-fl: brightness(0.8);\n            --dark-fl-hover: brightness(0.9);\n            --light-fl: brightness(0.9);\n            --light-fl-hover: brightness(0.8);\n            --dark-bt: rgba(39, 39, 39 ,1);\n            --dark-bt-hover: rgba(82, 82, 82, 1);\n            --light-bt: rgba(242, 242, 242, 0.1);\n            --light-bt-hover: rgba(229, 229, 229, 1);\n        }\n        #start.ytd-masthead {\n            height: 50px;\n            border-radius: 30px;\n            display: flex;\n            position: static;\n            margin: 0 10%;\n            border: 1px solid red;\n            backdrop-filter: var(--light-fl);\n        }\n        .ytSearchboxComponentHost {\n            height: 53px;\n            margin: 0 12px 0 0;\n        }\n        .ytSearchboxComponentInputBox {\n            margin-left: 0;\n            margin-top: 0;\n            border: 1px solid red;\n            box-shadow: none;\n            height: 50px;\n            background: transparent;\n            backdrop-filter: var(--light-fl);\n            display: flex;\n            justify-content: space-around;\n        }\n        #center.ytd-masthead {\n            margin: auto;\n        }\n        #container.ytd-searchbox {\n            margin-left: 0;\n            border: 1px solid red;\n            box-shadow: none;\n            background: transparent;\n            backdrop-filter: var(--light-fl);\n            display: flex;\n            opacity: 0;\n            justify-content: space-around;\n        }\n        #end.ytd-masthead {\n            height: 50px;\n            min-width: 10px;\n            border-radius: 30px;\n            position: relative;\n            margin: 0 10%;\n            border: 1px solid red;\n            backdrop-filter: var(--light-fl);\n        }\n        ytd-watch-flexy[flexy] #secondary.ytd-watch-flexy {\n            min-width: 450px;\n            padding-right: 0px;\n        }\n        .ytSearchboxComponentSearchButton {\n            background: transparent;\n            border: 1px solid red;\n            backdrop-filter: var(--light-fl);\n            height: 52px;\n        }\n        .yt-spec-button-shape-next--overlay.yt-spec-button-shape-next--text {\n            backdrop-filter: var(--light-fl);\n            color: white;\n        }\n        #background.ytd-masthead {\n            position: fixed;\n            opacity: 0;\n            visibility: visible;\n        }\n        #search-form.ytd-searchbox {\n            height: 50px;\n        }\n        ytd-searchbox.ytd-masthead {\n            margin: 0;\n            padding: 0 10px;\n        }\n        #sections.ytd-guide-renderer {\n            position: relative;\n        }\n        #sections.ytd-guide-renderer > *.ytd-guide-renderer:first-child {\n            padding: 0px;\n        }\n        #voice-search-button.ytd-masthead {\n            margin-left: 0;\n            background: transparent;\n            backdrop-filter: var(--light-fl);\n        }\n        #chips-wrapper.ytd-feed-filter-chip-bar-renderer {\n            display: none;\n        }\n        .yt-spec-touch-feedback-shape__fill {\n            background-color: black;\n        }\n        .yt-spec-icon-shape {\n            color: #c00;\n        }\n        ytd-feed-filter-chip-bar-renderer {\n            height: 0;\n        }\n        #frosted-glass.with-chipbar.ytd-app {\n            display: none;\n        }\n        .yt-spec-touch-feedback-shape {\n            border: 1px solid red;\n        }\n        @media (prefers-color-scheme: dark) {\n        #start.ytd-masthead, .ytSearchboxComponentInputBox, #container.ytd-searchbox, #end.ytd-masthead,\n        .ytSearchboxComponentSearchButton, .yt-spec-button-shape-next--overlay.yt-spec-button-shape-next--text,\n        #voice-search-button.ytd-masthead {\n            backdrop-filter: var(--dark-fl) !important;\n            }\n        #start.ytd-masthead:hover, .ytSearchboxComponentInputBox:hover, #container.ytd-searchbox:hover,\n        #end.ytd-masthead:hover, .ytSearchboxComponentSearchButton:hover,\n        .yt-spec-button-shape-next--overlay.yt-spec-button-shape-next--text:hover,\n        #voice-search-button.ytd-masthead:hover {\n            backdrop-filter: var(--dark-fl-hover) !important;\n            }\n        }\n        #scroll-top-container {\n            position: fixed;\n            bottom: 20px;\n            width: 55px;\n            height: 55px;\n            opacity: 0;\n            transition: opacity 0.3s ease;\n            z-index: 1000;\n        }\n        .scroll-top-btn {\n            pointer-events: all;\n            width: 100%;\n            height: 100%;\n            border-radius: 50%;\n            background-color: transparent;\n            cursor: pointer;\n            opacity: 1;\n            border: 1px solid red;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            background-color: var(--light-bt);\n        }\n        .scroll-top-btn:hover {\n            background-color: var(--light-bt-hover);\n            transition: background-color 0.2s ease;\n        }\n        @media (prefers-color-scheme: dark) {\n            .scroll-top-btn {\n                background-color: transparent;\n                background-color: var(--dark-bt);\n            }\n            .scroll-top-btn:hover {\n                border-color: var(--dark-bt-hover);\n            }\n        }\n        .scroll-up-btn {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            height: 100%;\n            width: 100%;\n        }\n        .skip-toggle-btn {\n            pointer-events: all;\n            width: 100%;\n            height: 100%;\n            margin: 0;\n            border-radius: 50%;\n            background-color: var(--light-bt);\n            cursor: pointer;\n            transition: background-color 0.2s ease;\n            z-index: 1000;\n            opacity: 1;\n            border: 1px solid red;\n            justify-content: center;\n            align-items: center;\n        }\n        .skip-toggle-btn:hover {\n            background-color: var(--light-bt-hover);\n        }\n        @media (prefers-color-scheme: dark) {\n            .skip-toggle-btn {\n                background-color: var(--dark-bt);\n            }\n            .skip-toggle-btn:hover {\n                background-color: var(--dark-bt-hover);\n            }\n        }\n        .toggle-icon {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            height: 100%;\n            width: 100%;\n            color: #c00;\n            font-size: 13px;\n            font-family: 'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande',\n            'Lucida Sans Unicode', Geneva, Verdana, sans-serif;\n            font-weight: 600;\n        }\n    `;\n\n    // Create and position the scroll-to-top button\n    function createScrollToTopBtn() {\n        let scrollTopContainer = document.getElementById('scroll-top-container');\n        if (!scrollTopContainer) {\n            scrollTopContainer = document.createElement('div');\n            scrollTopContainer.id = 'scroll-top-container';\n            scrollTopContainer.className = 'navigation-button style-scope ytd-watch-flexy';\n            const scrollToTopBtn = document.createElement('button');\n            scrollToTopBtn.id = 'scroll-to-top';\n            scrollToTopBtn.className = 'scroll-top-btn';\n            scrollToTopBtn.setAttribute('aria-label', 'Scroll to Top');\n\n            const svgElement = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n            const pathElement = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n            const divElement = document.createElement('div');\n\n            svgElement.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\n            svgElement.setAttribute('height', '24');\n            svgElement.setAttribute('viewBox', '0 0 24 24');\n            svgElement.setAttribute('width', '24');\n            svgElement.setAttribute('focusable', 'false');\n            svgElement.style.fill = 'red';\n            svgElement.style.display = 'flex';\n\n            pathElement.setAttribute(\n                'd',\n                'M19.884 10.114a1.25 1.25 0 01-1.768 1.768L13.25 7.016v12.982a1.25 1.25 0 11-2.5 0V7.016l-4.866 4.866a1.25 1.25 0 11-1.768-1.768L12 2.23l7.884 7.884Z'\n            );\n\n            svgElement.appendChild(pathElement);\n            divElement.classList.add('scroll-up-btn');\n            divElement.appendChild(svgElement);\n            scrollToTopBtn.appendChild(divElement);\n            scrollTopContainer.appendChild(scrollToTopBtn);\n            document.body.appendChild(scrollTopContainer);\n\n            scrollToTopBtn.addEventListener('click', () => {\n                window.scrollTo({ top: 0, behavior: 'smooth' });\n            });\n        }\n\n        const viewportWidth = window.innerWidth;\n        const buttonPosition = window.screen.width === 2560 && window.screen.height === 1440\n            ? viewportWidth * 0.73\n            : viewportWidth * 0.7;\n        scrollTopContainer.style.left = `${buttonPosition}px`;\n\n        const scrollPosition = window.pageYOffset || document.documentElement.scrollTop;\n        scrollTopContainer.style.opacity = (scrollPosition > 1000 && checkIfWatchPage()) ? '1' : '0';\n    }\n\n    // Combined layout update\n    function updateLayout() {\n        const masthead = document.querySelector('#masthead-container.ytd-app');\n        const center = document.querySelector('#center.ytd-masthead');\n        const container = document.querySelector('#container.ytd-masthead');\n        const primaryElement = document.querySelector('#primary');\n        const columnsElement = document.querySelector('#columns');\n\n        if (masthead && center && container) {\n            const windowWidth = window.innerWidth;\n            container.style.opacity = window.scrollY !== 0 ? '0.6' : '1';\n            const centerFlexBasis = windowWidth <= 658 ? 200 :\n                windowWidth >= 1750 ? 550 :\n                200 + ((windowWidth - 658) / (1750 - 658)) * (550 - 200);\n            center.style.flex = `0 0 ${centerFlexBasis}px`;\n        }\n\n        if (primaryElement && columnsElement) {\n            const viewportWidth = window.innerWidth;\n            let maxWidthValue, position;\n            if (window.screen.width === 2560 && window.screen.height === 1440) {\n                maxWidthValue = 2300;\n                position = window.pageYOffset >= 4200 ? viewportWidth * 0.75 + 20 : viewportWidth * 0.55 - 30;\n            } else {\n                maxWidthValue = 1850;\n                position = viewportWidth * 0.45 - 10;\n            }\n\n            const cssRules = `\n                #primary.ytd-watch-flexy {\n                    max-width: ${maxWidthValue}px !important;\n                    margin-left: 0px !important;\n                    margin-top: 12px !important;\n                }\n                #columns.ytd-watch-flexy {\n                    max-width: ${maxWidthValue}px !important;\n                }\n                body.efyt-mini-player.efyt-mini-player-top-right #movie_player:not(.ytp-fullscreen) {\n                    height: 315px !important;\n                    border-radius: 14px !important;\n                    top: 55px !important;\n                    left: ${position}px !important;\n                }\n                body._top-right #efyt-close-mini-player {\n                    top: 60px !important;\n                    left: ${position}px !important;\n                    width: 3%;\n                    height: 3%;\n                }\n            `;\n            let pageStyles = document.querySelector('style[data-page-styles]');\n            if (!pageStyles) {\n                pageStyles = document.createElement('style');\n                pageStyles.setAttribute('data-page-styles', 'true');\n                document.head.appendChild(pageStyles);\n            }\n            pageStyles.textContent = cssRules;\n        }\n    }\n\n    // Wait for DOM element using MutationObserver\n    function waitForDOMElement(selector, callback, options = {}) {\n        const { timeout = 15000 } = options;\n        const element = document.querySelector(selector);\n        if (element) {\n            callback(element);\n            return;\n        }\n\n        const observer = new MutationObserver((mutations, obs) => {\n            const target = document.querySelector(selector);\n            if (target) {\n                obs.disconnect();\n                callback(target);\n            }\n        });\n\n        observer.observe(document.documentElement, {\n            childList: true,\n            subtree: true,\n        });\n\n        setTimeout(() => observer.disconnect(), timeout);\n    }\n\n    // Restart observer\n    function restartObserver() {\n        let isRestartScheduled = false;\n        if (isRestartScheduled) return;\n        isRestartScheduled = true;\n        setTimeout(() => {\n            isRestartScheduled = false;\n            SkippingShortsMechanism();\n        }, 1000);\n    }\n\n    // Handle skipping shorts (unchanged as per request)\n    function SkippingShortsMechanism() {\n        if (checkIfShortsPage() && isClicked) {\n            isClicked = false;\n            let observer = null;\n            if (!hasNavigationButtonBeenFetched) {\n                waitForDOMElement(\n                    '#navigation-button-down > ytd-button-renderer > yt-button-shape > button',\n                    button => {\n                        navigationButtonDown = button;\n                        hasNavigationButtonBeenFetched = true;\n\n                        navigationButtonDown.addEventListener(\n                            'click',\n                            function observerReinitHandler(e) {\n                                if (!e.isTrusted) return;\n                                navigationButtonDown.removeEventListener(\n                                    'click',\n                                    observerReinitHandler\n                                );\n                                if (observer) {\n                                    observer.disconnect();\n                                }\n                                restartObserver();\n                            }\n                        );\n                    },\n                    { timeout: 15000 }\n                );\n            }\n            waitForDOMElement(\n                '#scrubber > desktop-shorts-player-controls > div > yt-progress-bar > div',\n                progressBarElement => {\n                    if (observer) {\n                        observer.disconnect();\n                    }\n                    let maxWidth = 0;\n\n                    observer = new MutationObserver(mutations => {\n                        mutations.forEach(mutation => {\n                            if (\n                                mutation.attributeName === 'aria-valuetext' &&\n                                isSkippingEnabled\n                            ) {\n                                let ariaValueText =\n                                    progressBarElement.getAttribute('aria-valuetext');\n                                let widthNumber = parseFloat(ariaValueText.replace('%', ''));\n                                if (widthNumber >= maxWidth) {\n                                    maxWidth = widthNumber;\n                                } else if (widthNumber < maxWidth - 10 && !isClicked) {\n                                    dispatchSpacebarEvent();\n                                    navigationButtonDown.click();\n                                    isClicked = true;\n                                    observer.disconnect();\n                                    restartObserver();\n                                    maxWidth = 0;\n                                }\n                            }\n                        });\n                    });\n                    observer.observe(progressBarElement, {\n                        attributes: true,\n                        attributeFilter: ['aria-valuetext'],\n                    });\n                },\n                { timeout: 15000 }\n            );\n        }\n    }\n\n    // Toggle button for YouTube Shorts\n    function createShortsSkipBtn() {\n        if (checkIfShortsPage()) {\n            let toggleButton = document.getElementById('shorts-skip-toggle');\n            if (!toggleButton) {\n                const autoskipContainer = document.createElement('div');\n                autoskipContainer.className = 'navigation-button style-scope ytd-shorts';\n                autoskipContainer.id = 'shorts-autoskip';\n                autoskipContainer.style.width = '58px';\n                autoskipContainer.style.height = '58px';\n\n                toggleButton = document.createElement('button');\n                toggleButton.id = 'shorts-skip-toggle';\n                toggleButton.className = 'skip-toggle-btn';\n                toggleButton.title = 'Toggle Video Skipping (ON = Skip, OFF = No Skip)';\n\n                const icon = document.createElement('span');\n                icon.className = 'toggle-icon';\n                icon.textContent = 'SKIP';\n                toggleButton.appendChild(icon);\n\n                autoskipContainer.appendChild(toggleButton);\n\n                waitForDOMElement(\n                    '.navigation-container.style-scope.ytd-shorts',\n                    (navigationContainer) => {\n                        waitForDOMElement(\n                            '#navigation-button-up',\n                            (navigationButtonUp) => {\n                                navigationContainer.insertBefore(autoskipContainer, navigationButtonUp);\n                            },\n                            { timeout: 15000 }\n                        );\n                    },\n                    { timeout: 15000 }\n                );\n\n                toggleButton.addEventListener('click', () => {\n                    isSkippingEnabled = !isSkippingEnabled;\n                    icon.textContent = isSkippingEnabled ? 'SKIP' : 'NO SKIP';\n\n                    if (isSkippingEnabled) {\n                        const progressBarElement = document.querySelector(\n                            '#scrubber > desktop-shorts-player-controls > div > yt-progress-bar > div'\n                        );\n                        if (progressBarElement) {\n                            let observer = new MutationObserver(mutations => {\n                                mutations.forEach(mutation => {\n                                    if (\n                                        mutation.attributeName === 'aria-valuetext' &&\n                                        isSkippingEnabled\n                                    ) {\n                                        let ariaValueText =\n                                            progressBarElement.getAttribute('aria-valuetext');\n                                        let widthNumber = parseFloat(ariaValueText.replace('%', ''));\n                                        if (widthNumber >= maxWidth) {\n                                            maxWidth = widthNumber;\n                                        } else if (widthNumber < maxWidth - 10 && !isClicked) {\n                                            dispatchSpacebarEvent();\n                                            navigationButtonDown.click();\n                                            isClicked = true;\n                                            observer.disconnect();\n                                            restartObserver();\n                                            maxWidth = 0;\n                                        }\n                                    }\n                                });\n                            });\n                            observer.observe(progressBarElement, {\n                                attributes: true,\n                                attributeFilter: ['aria-valuetext'],\n                            });\n                        }\n                    } else {\n                        let observer = null;\n                        if (observer) {\n                            observer.disconnect();\n                        }\n                    }\n                });\n            }\n        }\n    }\n\n    // Helper functions\n    function checkIfWatchPage() {\n        return window.location.href.includes('youtube.com/watch');\n    }\n\n    function checkIfShortsPage() {\n        return window.location.href.includes('youtube.com/shorts');\n    }\n\n    function dispatchSpacebarEvent() {\n        const spacebarEvent = new KeyboardEvent('keydown', {\n            key: ' ',\n            code: 'Space',\n            keyCode: 32,\n            bubbles: true,\n            cancelable: true,\n        });\n        document.dispatchEvent(spacebarEvent);\n    }\n\n    function removeToggleButton() {\n        const toggleButton = document.getElementById('shorts-skip-toggle');\n        if (toggleButton && toggleButton.parentNode) {\n            toggleButton.dispatchEvent(new Event('remove'));\n            toggleButton.parentNode.removeChild(toggleButton);\n        }\n    }\n\n    // URL change detection with MutationObserver fallback\n    function observeUrlChanges() {\n        let lastUrl = null;\n        const originalPushState = history.pushState;\n        history.pushState = function (...args) {\n            originalPushState.apply(this, args);\n            handleUrlChange();\n        };\n\n        const originalReplaceState = history.replaceState;\n        history.replaceState = function (...args) {\n            originalReplaceState.apply(this, args);\n            handleUrlChange();\n        };\n\n        window.addEventListener('popstate', handleUrlChange);\n\n        const urlObserver = new MutationObserver(() => {\n            handleUrlChange();\n        });\n        urlObserver.observe(document.documentElement, {\n            childList: true,\n            subtree: true,\n        });\n\n        function handleUrlChange() {\n            const currentUrl = window.location.href;\n            if (currentUrl !== lastUrl) {\n                lastUrl = currentUrl;\n                if (currentUrl.includes('youtube.com/shorts')) {\n                    SkippingShortsMechanism();\n                    createShortsSkipBtn();\n                } else {\n                    removeToggleButton();\n                    let observer = null;\n                    if (observer) {\n                        observer.disconnect();\n                    }\n                }\n            }\n        }\n\n        handleUrlChange();\n    }\n\n    // Event listeners with debouncing\n    let lastWheelEvent = 0;\n    let lastKeyEvent = 0;\n    const debounceDelay = 1000;\n\n    document.addEventListener('wheel', function (event) {\n        const now = Date.now();\n        if (event.deltaY !== 0 && now - lastWheelEvent > debounceDelay) {\n            lastWheelEvent = now;\n            let observer = null;\n            if (observer) {\n                observer.disconnect();\n            }\n            restartObserver();\n        }\n    });\n\n    document.addEventListener('keydown', function (event) {\n        const now = Date.now();\n        if ((event.keyCode === 38 || event.keyCode === 40) && now - lastKeyEvent > debounceDelay) {\n            lastKeyEvent = now;\n            let observer = null;\n            if (observer) {\n                observer.disconnect();\n            }\n            restartObserver();\n        }\n    });\n\n    window.addEventListener('scroll', () => {\n        updateLayout();\n        createScrollToTopBtn();\n    });\n\n    window.addEventListener('resize', throttle(() => {\n        updateLayout();\n        createScrollToTopBtn();\n    }, 30));\n\n    window.addEventListener('load', () => {\n        updateLayout();\n        createScrollToTopBtn();\n        observeUrlChanges();\n    });\n\n    window.addEventListener('popstate', () => {\n        updateLayout();\n        createScrollToTopBtn();\n    });\n\n    window.addEventListener('DOMContentLoaded', () => {\n        observeUrlChanges();\n    });\n\n    // Initial calls\n    updateLayout();\n    createScrollToTopBtn();\n    observeUrlChanges();\n})();",
    "customtheme": false,
    "darktheme": false,
    "date": 1648332255121,
    "defaultvolume": false,
    "disableautoplay": false,
    "executescript": true,
    "expanddescription": true,
    "filter": "none",
    "hidecardsendscreens": true,
    "hidechat": false,
    "hidecomments": false,
    "hiderelated": false,
    "hideshorts": false,
    "ignoreplaylists": true,
    "ignorepopupplayer": true,
    "localecode": "en_US",
    "localedir": "ltr",
    "miniplayer": true,
    "miniplayerposition": "top-right",
    "miniplayersize": "560x315",
    "newestcomments": false,
    "overridespeeds": false,
    "pauseforegroundtab": false,
    "pausevideos": true,
    "popuplayersize": "747x420",
    "previousversion": "3.0.5",
    "qualityembeds": "hd720",
    "qualityembedsfullscreen": "hd1080",
    "qualityplaylists": "hd720",
    "qualityplaylistsfullscreen": "hd1440",
    "qualityvideos": "hd1080",
    "qualityvideosfullscreen": "hd1440",
    "reload": false,
    "reversemousewheeldirection": false,
    "selectquality": false,
    "selectqualityfullscreenoff": true,
    "selectqualityfullscreenon": true,
    "speed": 1,
    "speedvariation": 0.1,
    "stopvideos": false,
    "theatermode": true,
    "theme": "default-dark",
    "themevariant": "dark-red.css",
    "update": 1740129345957,
    "vendorthemevariant": "youtube-deep-dark.css",
    "videofilters": {
      "blur": 0,
      "brightness": 100,
      "contrast": 100,
      "grayscale": 0,
      "inversion": 0,
      "rotation": 0,
      "saturation": 100,
      "sepia": 0
    },
    "volume": 100,
    "volumemultiplier": 2,
    "volumevariation": 5,
    "whatsnew": false,
    "wideplayer": true,
    "wideplayerviewport": false
  }
}
