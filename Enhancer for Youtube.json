{
  "version": "3.0.7",
  "settings": {
    "applyvideofilters": false,
    "backdropcolor": "#000000",
    "backdropopacity": 85,
    "blackbars": false,
    "blockautoplay": false,
    "blockhfrformats": false,
    "blockwebmformats": false,
    "boostvolume": false,
    "cinemamode": false,
    "cinemamodewideplayer": false,
    "controlbar": {
      "active": false,
      "autohide": false,
      "centered": true,
      "position": "fixed"
    },
    "controls": [],
    "controlsvisible": false,
    "controlspeed": false,
    "controlspeedmousebutton": false,
    "controlvolume": false,
    "controlvolumemousebutton": false,
    "convertshorts": false,
    "customcolors": {
      "--dimmer-text": "#cccccc",
      "--hover-background": "#232323",
      "--main-background": "#111111",
      "--main-color": "#00adee",
      "--main-text": "#eff0f1",
      "--second-background": "#181818",
      "--shadow": "#000000"
    },
    "customcss": "",
    "customscript": "(function () {\n    // Core Module: Shared state, utilities, and DOM cache\n    const Core = (function () {\n        let isClicked = true;\n        let isSkippingEnabled = true;\n        let hasNavigationButtonBeenFetched = false;\n        let navigationButtonDown = null;\n        let lastUrl = null;\n        let lastShortsId = null;\n        let observer = null;\n        let observerShortsId = null;\n        let isScrollButtonCreated = false;\n        let lastProcessedShortsId = null;\n        let lastMaxLoadTime = 500;\n        let lastWheelEvent = 0;\n        let lastKeyEvent = 0;\n        const debounceDelay = 1000;\n\n        const cache = {\n            center: null,\n            container: null,\n            primary: null,\n            columns: null\n        };\n\n        function throttle(fn, delay) {\n            let lastCall = 0;\n            return (...args) => {\n                const now = Date.now();\n                if (now - lastCall >= delay) {\n                    lastCall = now;\n                    fn(...args);\n                }\n            };\n        }\n\n        function debounce(fn, delay) {\n            let timeoutId;\n            return (...args) => {\n                clearTimeout(timeoutId);\n                timeoutId = setTimeout(() => {\n                    fn(...args);\n                }, delay);\n            };\n        }\n\n        function waitForDOMElement(selector, callback, options = {}) {\n            const { interval = 100, timeout = 15000, delay = 0 } = options;\n                const startTime = Date.now();\n                const checkElement = () => {\n                    const element = document.querySelector(selector);\n                    if (element) {\n                        callback(element);\n                    } else if (Date.now() - startTime < timeout) {\n                        setTimeout(checkElement, interval);\n                    }\n                };\n                if (delay > 0) {\n                    setTimeout(checkElement, delay);\n                } else {\n                    checkElement();\n                }\n        }\n\n        function waitForAllDOMElements(selectors, options = {}) {\n            const { timeout = 15000, maxRetries = 2, defaultDelay = 100 } = options;\n            return new Promise((resolve, reject) => {\n                const results = {};\n                let completed = 0;\n                let retryCount = 0;\n        \n                function pollElements(remainingSelectors) {\n                    if (!remainingSelectors.length) {\n                        resolve(results);\n                        return;\n                    }\n\n                    remainingSelectors.forEach(selector => {\n                        if (results[selector]) return; // Skip already found\n                        waitForDOMElement(\n                            selector,\n                            element => {\n                                results[selector] = { element, foundAt: performance.now() };\n                                completed++;\n                                if (completed === selectors.length) {\n                                    // Update lastMaxLoadTime based on max load time\n                                    const loadTimes = Object.values(results).map(r => r.foundAt - performance.now());\n                                    Core.state.lastMaxLoadTime = Math.max(...loadTimes, defaultDelay);\n                                    resolve(results);\n                                }\n                            },\n                            { interval: 100, timeout, delay: Core.state.lastMaxLoadTime || defaultDelay }\n                        );\n                    });\n        \n                    setTimeout(() => {\n                        if (completed < selectors.length && retryCount < maxRetries) {\n                            retryCount++;\n                            // Calculate dynamic retry delay based on found elements\n                            const foundTimes = Object.values(results).map(r => r.foundAt - performance.now());\n                            const avgLoadTime = foundTimes.length ? foundTimes.reduce((a, b) => a + b, 0) / foundTimes.length : timeout / 2;\n                            const retryDelay = Math.max(1000, avgLoadTime * 1.5);\n                            console.warn(`Retrying ${remainingSelectors.filter(s => !results[s]).length} selectors, attempt ${retryCount + 1}/${maxRetries}, delay ${retryDelay}ms`);\n                            setTimeout(() => pollElements(remainingSelectors.filter(s => !results[s])), retryDelay);\n                        } else if (completed < selectors.length) {\n                            const missing = selectors.filter(s => !results[s]);\n                            reject(new Error(`Failed to find selectors after ${maxRetries} retries: ${missing.join(', ')}`));\n                        }\n                    }, timeout);\n                }\n                pollElements(selectors);\n            });\n        }\n\n        function checkIfWatchPage() {\n            return window.location.href.includes('youtube.com/watch');\n        }\n\n        function checkIfShortsPage() {\n            return window.location.href.includes('youtube.com/shorts');\n        }\n\n        function getShortsId() {\n            const url = window.location.href;\n            const match = url.match(/youtube\\.com\\/shorts\\/([^?]+)/);\n            return match ? match[1] : null;\n        }\n\n        function pauseVideo() {\n            const videoElement = document.querySelector('video');\n            if (videoElement && !videoElement.paused) {\n                videoElement.pause();\n            }\n        }\n\n        return {\n            state: {\n                isClicked, isSkippingEnabled, hasNavigationButtonBeenFetched, navigationButtonDown,\n                lastUrl, lastShortsId, observer, observerShortsId, isScrollButtonCreated,\n                lastProcessedShortsId, lastMaxLoadTime, lastWheelEvent, lastKeyEvent, debounceDelay\n            },\n            utils: { throttle, debounce, waitForDOMElement, waitForAllDOMElements, checkIfWatchPage, checkIfShortsPage, getShortsId, pauseVideo },\n            cache\n        };\n    })();\n\n    // Styles Module: CSS injection\n    const Styles = (function () {\n        const styleElement = document.createElement('style');\n        document.head.appendChild(styleElement);\n        styleElement.textContent = `\n            :root {\n                --dark-bt: rgb(200 200 200 / 15%);\n                --dark-bt-hover: rgba(255 255 255 /25%);\n                --dark-bt-tp: rgb(0 0 0/ 1%);\n                --light-bt: rgb(0 0 0 / 7%);\n                --light-bt-tp: rgb(255 255 255/ 1%);\n                --light-bt-hover: rgb(0 0 0 /15%);\n            }\n            #start.ytd-masthead, #end.ytd-masthead {\n                height: 50px;\n                border-radius: 30px;\n                display: flex;\n                position: static;\n                margin: 0 10%;\n                border: 1px dotted red;\n                background-color: var(--light-bt);\n            }\n            .ytSearchboxComponentHost {\n                height: 53px;\n                margin: 0 12px 0 0;\n            }\n            .ytSearchboxComponentInputBox {\n                margin: 0 0 0 0;\n                border: 1px dotted red;\n                box-shadow: none;\n                height: 50px;\n                background: transparent;\n                background-color: var(--light-bt);\n                display: flex;\n                justify-content: space-around;\n            }\n            #center.ytd-masthead {\n                margin: auto;\n                flex: 0 0 550px;\n            }\n            #container.ytd-masthead {\n                box-shadow: none;\n                background: transparent;\n                display: flex;\n                opacity: 1;\n                z-index: 1000;\n                justify-content: space-evenly;\n            }\n            ytd-watch-flexy[flexy] #secondary.ytd-watch-flexy {\n                min-width: 450px;\n                padding-right: 0px;\n            }\n            .ytSearchboxComponentSearchButton {\n                background: transparent;\n                border: 1px dotted red;\n                background-color: var(--light-bt);\n                height: 52px;\n            }\n            #background.ytd-masthead {\n                position: fixed;\n                opacity: 0;\n                visibility: visible;\n            }\n            #search-form.ytd-searchbox {\n                height: 50px;\n            }\n            ytd-searchbox.ytd-masthead {\n                margin: 0;\n                padding: 0 10px;\n            }\n            #sections.ytd-guide-renderer {\n                position: relative;\n            }\n            #sections.ytd-guide-renderer>*.ytd-guide-renderer:first-child {\n                padding: 0px;\n            }\n            #voice-search-button.ytd-masthead {\n                margin-left: 0;\n                background: transparent;\n            }\n            #chips-wrapper.ytd-feed-filter-chip-bar-renderer {\n                display: none;\n            }\n            .yt-spec-icon-shape {\n                color: #c00;\n            }\n            ytd-feed-filter-chip-bar-renderer {\n                height: 0;\n            }\n            #frosted-glass.with-chipbar.ytd-app {\n                display: none;\n            }\n            .yt-core-attributed-string--white-space-no-wrap {\n                color: #c00 !important;\n            }\n            .yt-spec-button-shape-next--mono.yt-spec-button-shape-next--filled {\n                background: none !important;\n                color:black !important;\n            }\n                .yt-spec-button-shape-next--overlay.yt-spec-button-shape-next--text {\n                background-color: var(--light-bt) !important;\n            }\n            yt-chip-cloud-chip-renderer[chip-style=STYLE_DEFAULT][selected] #chip-container.yt-chip-cloud-chip-renderer {\n                background-color: var(--yt-spec-badge-chip-background) !important;\n                color: var(--yt-spec-text-primary) !important;\n            }\n            .yt-spec-touch-feedback-shape {\n                border: 1px dotted red;\n            }\n            .yt-spec-touch-feedback-shape:hover {\n                background-color: var(--light-bt-hover) !important;\n            }\n            #content > yt-lockup-view-model > div > yt-touch-feedback-shape > div {\n                background-color: var(--light-bt-tp) !important;\n                border: none !important;\n            }\n            #contents > yt-lockup-view-model:nth-child(n) > div > yt-touch-feedback-shape > div {\n                background-color: var(--light-bt-tp) !important;\n                border: none !important;\n            }\n            @media (prefers-color-scheme: dark) {\n                #start.ytd-masthead,\n                .ytSearchboxComponentInputBox,\n                #container.ytd-searchbox,\n                #end.ytd-masthead,\n                .scroll-top-btn,\n                .skip-toggle-btn,\n                .ytSearchboxComponentSearchButton,\n                .yt-spec-touch-feedback-shape,\n                #voice-search-button.ytd-masthead \n                {\n                    background-color: var(--dark-bt) !important;\n                }\n                #content > yt-lockup-view-model > div > yt-touch-feedback-shape > div {\n                    background-color: var(--dark-bt-tp) !important;\n                    border: none !important;\n                }\n                #contents > yt-lockup-view-model:nth-child(n) > div > yt-touch-feedback-shape > div {\n                    background-color: var(--dark-bt-tp) !important;\n                    border: none !important;\n                }\n                #start.ytd-masthead:hover,\n                .ytSearchboxComponentInputBox:hover,\n                #container.ytd-searchbox:hover,\n                #end.ytd-masthead:hover,\n                .scroll-top-btn:hover,\n                .skip-toggle-btn:hover,\n                .ytSearchboxComponentSearchButton:hover,\n                .yt-spec-touch-feedback-shape:hover,\n                .yt-spec-button-shape-next--overlay.yt-spec-button-shape-next--text:hover,\n                #voice-search-button.ytd-masthead:hover \n                {\n                    background-color: var(--dark-bt-hover) !important;\n                }\n            }\n            #scroll-top-container {\n                position: fixed;\n                bottom: 20px;\n                width: 55px;\n                height: 55px;\n                transition: opacity 0.3s ease;\n                z-index: 1000;\n                opacity: 0;\n            }\n            .scroll-top-btn {\n                pointer-events: all;\n                width: 100%;\n                height: 100%;\n                border-radius: 50%;\n                cursor: pointer;\n                border: 1px dotted red;\n                display: flex;\n                justify-content: center;\n                align-items: center;\n                background-color: var(--light-bt);\n            }\n            .scroll-top-btn:hover {\n                background-color: var(--light-bt-hover);\n            }\n            .scroll-up-btn {\n                display: flex;\n                justify-content: center;\n                align-items: center;\n                height: 100%;\n                width: 100%;\n            }\n            .skip-toggle-btn {\n                pointer-events: all;\n                width: 56px;\n                height: 56px;\n                margin: 0;\n                border-radius: 50%;\n                cursor: pointer;\n                border: none;\n                transition: background-color 0.2s ease, opacity 4s ease;\n                z-index: 1000;\n                opacity: 1;\n                justify-content: center;\n                align-items: center;\n            }\n            .skip-toggle-btn:hover {\n                background-color: var(--light-bt-hover);\n            }\n            .toggle-icon {\n                display: flex;\n                justify-content: center;\n                align-items: center;\n                height: 100%;\n                width: 100%;\n                color: #c00;\n                font-size: 13px;\n                font-family: 'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande',\n                'Lucida Sans Unicode', Geneva, Verdana, sans-serif;\n                font-weight: 600;\n            }\n            .skip-tooltip {\n                display: flex;\n                position: absolute;\n                left: -150px;\n                top: 0;\n                height: 25px;\n                transform: translateY(8px);\n                background-color: #707070;\n                color: #ffffff;\n                padding: 6px 8px;\n                border-radius: 4px;\n                font-family: \"Roboto\", \"Arial\", sans-serif;\n                font-size: 1.2rem;\n                line-height: 1.8rem;\n                font-weight: 400;\n                align-items: center;\n                z-index: 1001;\n                opacity: 0;\n                visibility: hidden;\n                transition: opacity 0.2s ease-in-out;\n            }\n            .skip-toggle-btn:hover+.skip-tooltip,\n            .skip-tooltip:hover {\n                opacity: 1;\n                visibility: visible;\n            }\n        `;\n    })();\n\n    // Layout Module: Layout updates with cached DOM elements via waitForAllDOMElements\n    const Layout = (function () {\n        const { utils, cache } = Core;\n\n        function updateLayout() {\n            // Check if masthead elements are cached\n            if (!cache.center || !cache.center.isConnected || !cache.container || !cache.container.isConnected) {\n                const selectors = ['#center.ytd-masthead', '#container.ytd-masthead'];\n                utils.waitForAllDOMElements(selectors, { timeout: 15000, maxRetries: 2 })\n                    .then(results => {\n                        cache.center = results['#center.ytd-masthead'].element;\n                        cache.container = results['#container.ytd-masthead'].element;\n                        if (cache.center && cache.container) {\n                            const windowWidth = window.innerWidth;\n                            const scrollPosition = window.scrollY || document.documentElement.scrollTop;\n                            cache.container.style.opacity = scrollPosition === 0 ? '1' : '0.6';\n                            let centerFlexBasis = 200 + (windowWidth - 1035) * 0.3955;\n                            centerFlexBasis = Math.max(200, Math.min(550, centerFlexBasis));\n                            cache.center.style.flex = `0 0 ${centerFlexBasis}px`;\n                        }\n                    })\n                    .catch(() => {});\n            } else {\n                // Use cached masthead elements\n                const windowWidth = window.innerWidth;\n                const scrollPosition = window.scrollY || document.documentElement.scrollTop;\n                cache.container.style.opacity = scrollPosition === 0 ? '1' : '0.6';\n                let centerFlexBasis = 200 + (windowWidth - 1035) * 0.3955;\n                centerFlexBasis = Math.max(200, Math.min(550, centerFlexBasis));\n                cache.center.style.flex = `0 0 ${centerFlexBasis}px`;\n            }\n\n            if (utils.checkIfWatchPage()) {\n                // Cache primary and columns if not already cached\n                if (!cache.primary || !cache.primary.isConnected || !cache.columns || !cache.columns.isConnected) {\n                    const selectors = ['#primary', '#columns'];\n                    utils.waitForAllDOMElements(selectors, { timeout: 15000, maxRetries: 2 })\n                        .then(results => {\n                            cache.primary = results['#primary'].element;\n                            cache.columns = results['#columns'].element;\n                            applyWatchStyles();\n                        })\n                        .catch(err => console.error(`Watch page caching failed: ${err.message}`));\n                } else {\n                    applyWatchStyles();\n                }\n            }\n\n            function applyWatchStyles() {\n                const viewportWidth = window.innerWidth;\n                let maxWidthValue, position;\n                if (window.screen.width === 2560 && window.screen.height === 1440) {\n                    maxWidthValue = 2300;\n                    position = window.pageYOffset >= 4200 ? viewportWidth * 0.75 + 20 : viewportWidth * 0.55 - 30;\n                } else {\n                    maxWidthValue = 1850;\n                    position = 0.8633 * (viewportWidth - 1035) + 80;\n                    position = Math.max(80, Math.min(854, position));\n                }\n\n                const cssRules = `\n                    #primary.ytd-watch-flexy {\n                        max-width: ${maxWidthValue}px !important;\n                        margin-left: 0px !important;\n                        margin-top: 12px !important;\n                    }\n                    #columns.ytd-watch-flexy {\n                        max-width: ${maxWidthValue}px !important;\n                    }\n                    body.efyt-mini-player.efyt-mini-player-top-right #movie_player:not(.ytp-fullscreen) {\n                        height: 315px !important;\n                        border-radius: 14px !important;\n                        top: 55px !important;\n                        left: ${position}px !important;\n                    }\n                    body._top-right #efyt-close-mini-player {\n                        top: 60px !important;\n                        left: ${position}px !important;\n                        width: 3%;\n                        height: 3%;\n                    }\n                `;\n                let pageStyles = document.querySelector('style[data-page-styles]');\n                if (!pageStyles) {\n                    pageStyles = document.createElement('style');\n                    pageStyles.setAttribute('data-page-styles', 'true');\n                    document.head.appendChild(pageStyles);\n                }\n                pageStyles.textContent = cssRules;\n            }\n        }\n\n        return { updateLayout };\n    })();\n\n    // Shorts Module: Shorts skipping and toggle button\n    const Shorts = (function () {\n        const { state, utils } = Core;\n\n        function createShortsSkipBtn() {\n            if (utils.checkIfShortsPage()) {\n                let autoskipContainer = document.getElementById('shorts-autoskip');\n                if (!autoskipContainer) {\n                    autoskipContainer = document.createElement('div');\n                    autoskipContainer.className = 'navigation-button style-scope ytd-shorts';\n                    autoskipContainer.id = 'shorts-autoskip';\n\n                    const toggleButton = document.createElement('button');\n                    toggleButton.id = 'shorts-skip-toggle';\n                    toggleButton.className = 'skip-toggle-btn';\n\n                    const touchFeedbackShape = document.createElement('div');\n                    touchFeedbackShape.className = 'yt-spec-touch-feedback-shape';\n                    toggleButton.appendChild(touchFeedbackShape);\n\n                    const icon = document.createElement('span');\n                    icon.className = 'toggle-icon';\n                    icon.textContent = 'SKIP';\n                    toggleButton.appendChild(icon);\n\n                    const tooltip = document.createElement('div');\n                    tooltip.className = 'skip-tooltip';\n                    tooltip.textContent = 'Toggle Video Skipping';\n                    tooltip.setAttribute('role', 'tooltip');\n                    tooltip.setAttribute('aria-label', 'Toggle Video Skipping');\n\n                    autoskipContainer.appendChild(toggleButton);\n                    autoskipContainer.appendChild(tooltip);\n\n                    utils.waitForDOMElement(\n                        '.navigation-container.style-scope.ytd-shorts',\n                        navigationContainer => {\n                            utils.waitForDOMElement(\n                                '#navigation-button-up',\n                                navigationButtonUp => {\n                                    navigationContainer.insertBefore(autoskipContainer, navigationButtonUp);\n                                },\n                                { interval: 100, timeout: 15000 }\n                            );\n                        },\n                        { interval: 100, timeout: 15000 }\n                    );\n\n                    toggleButton.addEventListener('click', () => {\n                        state.isSkippingEnabled = !state.isSkippingEnabled;\n                        icon.textContent = state.isSkippingEnabled ? 'SKIP' : 'NO SKIP';\n\n                        if (state.isSkippingEnabled) {\n                            const progressBarElement = document.querySelector('#scrubber > desktop-shorts-player-controls > div > yt-progress-bar > div');\n                            if (progressBarElement && state.observer) {\n                                state.observer.observe(progressBarElement, {\n                                    attributes: true,\n                                    attributeFilter: ['aria-valuetext'],\n                                });\n                            }\n                        } else if (!state.isSkippingEnabled && state.observer) {\n                            state.observer.disconnect();\n                        }\n                    });\n                }\n            }\n        }\n\n        function SkippingShortsMechanism() {\n            if (utils.checkIfShortsPage()) {\n                const currentShortsId = utils.getShortsId();\n                if (currentShortsId === state.lastProcessedShortsId && state.observer && currentShortsId === state.observerShortsId) {\n                    return;\n                }\n                state.isClicked = false;\n                state.lastProcessedShortsId = currentShortsId;\n\n                if (state.observer) {\n                    state.observer.disconnect();\n                    state.observer = null;\n                    state.observerShortsId = null;\n                }\n\n                const selectors = [\n                    '#navigation-button-down > ytd-button-renderer > yt-button-shape > button',\n                    '#scrubber > desktop-shorts-player-controls > div > yt-progress-bar > div'\n                ];\n                utils.waitForAllDOMElements(selectors, { timeout: 15000, maxRetries: 2 })\n                    .then(results => {\n                        const navButton = results[selectors[0]].element;\n                        let progressBarElement = results[selectors[1]].element;\n                        if (!state.hasNavigationButtonBeenFetched) {\n                            state.navigationButtonDown = navButton;\n                            state.hasNavigationButtonBeenFetched = true;\n\n                            state.navigationButtonDown.addEventListener('click', function observerReinitHandler(e) {\n                                if (!e.isTrusted) {\n                                    return;\n                                }\n                                state.navigationButtonDown.removeEventListener('click', observerReinitHandler);\n                                if (state.observer) {\n                                    state.observer.disconnect();\n                                    state.observer = null;\n                                    state.observerShortsId = null;\n                                }\n                            });\n                        }\n\n                            let maxWidth = 0;\n                            let previousWidth = 0;\n                            let mutationCount = 0;\n\n                            state.observer = new MutationObserver(mutations => {\n                                mutationCount++;\n                                mutations.forEach(mutation => {\n                                    if (mutation.attributeName === 'aria-valuetext' && state.isSkippingEnabled) {\n                                        let ariaValueText = progressBarElement.getAttribute('aria-valuetext');\n                                        if (!ariaValueText) {\n                                            progressBarElement = document.querySelector('#scrubber > desktop-shorts-player-controls > div > yt-progress-bar > div');\n                                            ariaValueText = progressBarElement ? progressBarElement.getAttribute('aria-valuetext') : null;\n                                        }\n                                        if (ariaValueText) {\n                                            let widthNumber = parseFloat(ariaValueText.replace('%', ''));\n                                            if (isNaN(widthNumber)) {\n                                                return;\n                                            }\n                                            if (widthNumber >= maxWidth) {\n                                                maxWidth = widthNumber;\n                                                previousWidth = widthNumber;\n                                            } else if (!state.isClicked) {\n                                                if ((widthNumber === 0 || widthNumber === 1) && previousWidth >= 97) {\n                                                    utils.pauseVideo();\n                                                    state.navigationButtonDown.click();\n                                                    state.isClicked = true;\n                                                    state.observer.disconnect();\n                                                    state.observer = null;\n                                                    state.observerShortsId = null;\n                                                    maxWidth = 0;\n                                                    previousWidth = 0;\n                                                } else {\n                                                    state.previousWidth = widthNumber;\n                                                }\n                                            }\n                                        }\n                                    }\n                                });\n                            });\n                            state.observer.observe(progressBarElement, {\n                                attributes: true,\n                                attributeFilter: ['aria-valuetext'],\n                            });\n                            state.observerShortsId = currentShortsId;\n                    })\n                .catch(err => console.error(`waitForAllDOMElements failed: ${err.message}`));\n            }\n        }\n\n        function removeToggleButton() {\n            const toggleButton = document.querySelector('#shorts-skip-toggle');\n            if (toggleButton && toggleButton.parentNode) {\n                toggleButton.dispatchEvent(new Event('remove'));\n                toggleButton.parentNode.removeChild(toggleButton);\n            }\n        }\n\n        return { createShortsSkipBtn, SkippingShortsMechanism, removeToggleButton };\n    })();\n\n    // Watch Module: Scroll-to-top button\n    const Watch = (function () {\n        const { state: wsState, utils } = Core;\n\n        function createScrollToTopBtn() {\n            let scrollTopContainer = document.getElementById('scroll-top-container');\n            if (!scrollTopContainer) {\n                scrollTopContainer = document.createElement('div');\n                scrollTopContainer.setAttribute('id', 'scroll-top-container');\n                scrollTopContainer.className = 'navigation-button style-scope ytd-watch-flexy';\n                const scrollToTopBtn = document.createElement('button');\n                scrollToTopBtn.setAttribute('id', 'scroll-to-top');\n                scrollToTopBtn.className = 'scroll-top-btn';\n                scrollToTopBtn.setAttribute('aria-label', 'Scroll to Top');\n\n                const svgElement = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n                const pathElement = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n                const divElement = document.createElement('div');\n\n                svgElement.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\n                svgElement.setAttribute('height', '24');\n                svgElement.setAttribute('viewBox', '0 0 24 24');\n                svgElement.setAttribute('width', '24');\n                svgElement.setAttribute('focusable', 'false');\n                svgElement.style.fill = 'red';\n                svgElement.style.display = 'flex';\n                pathElement.setAttribute('d', 'M19.884 10.114a1.25 1.25 0 01-1.768 1.768L13.25 7.016v12.982a1.25 1.25 0 11-2.5 0V7.016l-4.866 4.866a1.25 1.25 0 11-1.768-1.768L12 2.299l7.884 7.884Z');\n                svgElement.appendChild(pathElement);\n                divElement.classList.add('scroll-up-btn');\n                divElement.appendChild(svgElement);\n                scrollToTopBtn.appendChild(divElement);\n                scrollTopContainer.appendChild(scrollToTopBtn);\n                document.body.appendChild(scrollTopContainer);\n                wsState.isScrollButtonCreated = true;\n\n                const updatePosition = () => {\n                    const viewportWidth = window.innerWidth;\n                    let buttonPosition;\n                    if (window.screen.width === 2560 && window.screen.height === 1440) {\n                        buttonPosition = 0.904 * (viewportWidth - 1035) + 544;\n                    } else {\n                        buttonPosition = 0.904 * (viewportWidth - 1035) + 544;\n                    }\n                    buttonPosition = Math.max(544, Math.min(1344, buttonPosition));\n                    scrollTopContainer.style.left = `${buttonPosition}px`;\n                };\n                updatePosition();\n\n                scrollToTopBtn.addEventListener('click', () => {\n                    window.scrollTo({\n                        top: 0,\n                        behavior: 'smooth',\n                    });\n                    setTimeout(() => Layout.updateLayout(), 500);\n                });\n\n                window.addEventListener('resize', utils.throttle(() => {\n                    if (utils.checkIfWatchPage()) {\n                        updatePosition();\n                    }\n                }, 30));\n            }\n        }\n\n        function handleScroll() {\n            const scrollPosition = window.scrollY || document.documentElement.scrollTop;\n            Layout.updateLayout();\n            const scrollTopContainer = document.getElementById('scroll-top-container');\n            if (scrollTopContainer) {\n                scrollTopContainer.style.opacity = (scrollPosition > 1000 && utils.checkIfWatchPage()) ? '1' : '0';\n            }\n            if (utils.checkIfWatchPage() && !state.isScrollButtonCreated) {\n                createScrollToTopBtn();\n            }\n        }\n    \n        function removeScrollButton() {\n            const scrollTopContainer = document.getElementById('scroll-top-container');\n            if (scrollTopContainer) {\n                scrollTopContainer.remove();\n                state.isScrollButtonCreated = false;\n            }\n        }\n\n        return { createScrollToTopBtn, handleScroll, removeScrollButton };\n    })();\n\n    // MainPage Module: Placeholder for main page logic\n    const MainPage = (function () {\n        return {};\n    })();\n\n    // Navigation Module: URL-based navigation and event handling\n    const Navigation = (function () {\n        const { state, utils, cache } = Core;\n\n        function handleNavigationChange() {\n            const currentUrl = window.location.href;\n            const currentPath = window.location.pathname;\n            if (currentUrl !== state.lastUrl) {\n                // Reset cache only if the base path changes (ignore ?v changes)\n                if (!state.lastUrl || currentPath !== new URL(state.lastUrl).pathname) {\n                    cache.center = null;\n                    cache.container = null;\n                    cache.primary = null;\n                    cache.columns = null;\n                }\n                state.lastUrl = currentUrl;\n                const currentShortsId = utils.getShortsId();\n                if (currentUrl.includes('youtube.com/shorts')) {\n                    if (state.isScrollButtonCreated) {\n                        Watch.removeScrollButton();\n                    }\n                    if (currentShortsId !== state.lastShortsId || currentShortsId !== state.observerShortsId || !state.observer) {\n                        state.lastShortsId = currentShortsId;\n                        if (state.observer && currentShortsId !== state.observerShortsId) {\n                            state.observer.disconnect();\n                            state.observer = null;\n                            state.observerShortsId = null;\n                        }\n                        Shorts.SkippingShortsMechanism();\n                    }\n                    Shorts.createShortsSkipBtn();\n                } else if (utils.checkIfWatchPage()) {\n                    Shorts.removeToggleButton();\n                    if (state.observer) {\n                        state.observer.disconnect();\n                        state.observer = null;\n                        state.observerShortsId = null;\n                    }\n                    state.lastShortsId = null;\n                    state.lastProcessedShortsId = null;\n                    if (!state.isScrollButtonCreated) {\n                        Watch.createScrollToTopBtn();\n                    }\n                } else {\n                    Shorts.removeToggleButton();\n                    if (state.isScrollButtonCreated) {\n                        Watch.removeScrollButton();\n                    }\n                    if (state.observer) {\n                        state.observer.disconnect();\n                        state.observer = null;\n                        state.observerShortsId = null;\n                    }\n                    state.lastShortsId = null;\n                    state.lastProcessedShortsId = null;\n                }\n                Layout.updateLayout();\n            }\n        }\n\n        return { handleNavigationChange };\n    })();\n\n    // Global Event Listeners and Initial Calls\n    document.addEventListener('wheel', function (event) {\n        if (!Core.utils.checkIfShortsPage()) return;\n        const now = Date.now();\n        if (event.deltaY !== 0 && now - Core.state.lastWheelEvent > Core.state.debounceDelay) {\n            Core.state.lastWheelEvent = now;\n            if (Core.utils.checkIfShortsPage()) {\n                const currentShortsId = Core.utils.getShortsId();\n                if (currentShortsId !== Core.state.observerShortsId) {\n                    if (Core.state.observer) {\n                        Core.state.observer.disconnect();\n                        Core.state.observer = null;\n                        Core.state.observerShortsId = null;\n                    }\n                    Core.state.lastShortsId = currentShortsId;\n                }\n            }\n        }\n    });\n\n    document.addEventListener('keydown', function (event) {\n        if (!Core.utils.checkIfShortsPage()) return;\n        const now = Date.now();\n        if ((event.keyCode === 38 || event.keyCode === 40) && now - Core.state.lastKeyEvent > Core.state.debounceDelay) {\n            Core.state.lastKeyEvent = now;\n            if (Core.utils.checkIfShortsPage()) {\n                const currentShortsId = Core.utils.getShortsId();\n                if (currentShortsId !== Core.state.observerShortsId) {\n                    if (Core.state.observer) {\n                        Core.state.observer.disconnect();\n                        Core.state.observer = null;\n                        Core.state.observerShortsId = null;\n                    }\n                    Core.state.lastShortsId = currentShortsId;\n                }\n            }\n        }\n    });\n\n    window.addEventListener('scroll', Core.utils.debounce(Watch.handleScroll, 150));\n\n    window.addEventListener('resize', Core.utils.throttle(() => {\n        Layout.updateLayout();\n        if (Core.utils.checkIfWatchPage() && !Core.state.isScrollButtonCreated) {\n            Watch.createScrollToTopBtn();\n        }\n    }, 30));\n\n    window.addEventListener('load', () => {\n        Layout.updateLayout();\n        Navigation.handleNavigationChange();\n    });\n\n    window.addEventListener('popstate', () => {\n        Layout.updateLayout();\n        Navigation.handleNavigationChange();\n    });\n\n    window.addEventListener('DOMContentLoaded', () => {\n        Navigation.handleNavigationChange();\n    });\n\n    const titleObserver = new MutationObserver(Core.utils.debounce(() => {\n        Navigation.handleNavigationChange();\n    }, 100));\n    titleObserver.observe(document.querySelector('title'), { childList: true });\n    \n    Layout.updateLayout();\n    Navigation.handleNavigationChange();\n})();",
    "customtheme": false,
    "darktheme": false,
    "date": 1648332255121,
    "defaultvolume": false,
    "disableautoplay": false,
    "executescript": true,
    "expanddescription": true,
    "filter": "none",
    "griditemsperrow": {
      "channel": {
        "shorts": {
          "apply": false,
          "count": 5
        },
        "videos": {
          "apply": false,
          "count": 4
        }
      },
      "posts": {
        "apply": false,
        "count": 4
      },
      "shorts": {
        "apply": false,
        "count": 8
      },
      "videos": {
        "apply": false,
        "count": 4
      }
    },
    "hidecardsendscreens": true,
    "hidechat": false,
    "hidecomments": false,
    "hiderelated": false,
    "hideshorts": false,
    "ignoreplaylists": true,
    "ignorepopupplayer": true,
    "localecode": "en_US",
    "localedir": "ltr",
    "miniplayer": true,
    "miniplayerposition": "top-right",
    "miniplayersize": "560x315",
    "newestcomments": false,
    "overridespeeds": false,
    "pauseforegroundtab": false,
    "pausevideos": true,
    "popuplayersize": "747x420",
    "previousversion": "3.0.6",
    "qualityembeds": "hd720",
    "qualityembedsfullscreen": "hd1080",
    "qualityplaylists": "hd720",
    "qualityplaylistsfullscreen": "hd1440",
    "qualityvideos": "hd1080",
    "qualityvideosfullscreen": "hd1440",
    "reload": false,
    "reversemousewheeldirection": false,
    "selectquality": true,
    "selectqualityfullscreenoff": true,
    "selectqualityfullscreenon": true,
    "speed": 1,
    "speedvariation": 0.1,
    "stopvideos": false,
    "theatermode": false,
    "theme": "default-dark",
    "themevariant": "dark-red.css",
    "update": 1748542902745,
    "vendorthemevariant": "youtube-deep-dark.css",
    "videofilters": {
      "blur": 0,
      "brightness": 100,
      "contrast": 100,
      "grayscale": 0,
      "inversion": 0,
      "rotation": 0,
      "saturation": 100,
      "sepia": 0
    },
    "volume": 100,
    "volumemultiplier": 2,
    "volumevariation": 5,
    "whatsnew": false,
    "wideplayer": true,
    "wideplayerviewport": false
  }
}
